<?php
/**
 * TdsAdditionalAttributes
 *
 * PHP version 8.1
 *
 * @package  SberPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.  По вопросам работы с API необходимо обращаться в Службу Поддержки (email: <a href=\"mailto:support@ecom.sberbank.ru\">support@ecom.sberbank.ru</a>). При обращении желательно указывать, что вопрос по целевому шлюзу интернет-эквайринга.  По вопросам получения доступов, операционой деятельности и прочим вопросам обслуживания необходимо обращаться к вашему менеджеру.  ## История изменений |Дата       |Версия документа|Описание изменений |-----------|----------------|--------------------------------------------------------------------------------------------------------------- |15.03.2024 |1.0.6           |Добавлена информация по сервисам смены пароля, POS-кредитования |15.12.2023 |1.0.5           |Добавлена информация по повышению конверсии платежей |03.10.2023 |1.0.4           |Добавлена документация по фискализации, СБП. Добавлено видео по работе в личном кабинете. |18.07.2023 |1.0.3           |Добавлена документация по работе со связками |18.07.2023 |1.0.2           |Добавлена документация по тестированию SberPay, внесены коррективы в описание сервисов. Добавлены тестовые карты |14.06.2023 |1.0.1           |Добавлено описание регистрации QR-ссылок. Добавлены примеры запросов и ответов для различных бизнес-сценариев |21.05.2023 |1.0.0           |Начальная версия openAPI  # Общая информация  ## Термины * __Платёжный шлюз (ПШ, Шлюз)__ — комплекс решений для осуществления процесса интернет-эквайринга с использованием различных платёжных средств. * __Клиент__ — система или лицо, которое взаимодействует с ПШ. * __Плательщик__ — физическое или юридическое лицо, совершающее платёж по своей карте за услуги мерчанта в ПШ. * __Заказ__ — элементарная сущность ПШ, описывающее заказ в некотором интернет-магазине или его аналоге. * __Одностадийный платёж__ — операция по оплате товаров/услуг, не требующая дополнительного подтверждения (Завершения), то есть блокирование и списание средств происходит в один этап. Этот вид платежей предпочтительней, если товар или услуга предоставляется сразу после оплаты. * __Двухстадийный платёж__ — операция по оплате товаров/услуг, требующая дополнительного подтверждения (Завершения), то есть оплата производится в два этапа. На первом этапе происходит проверка наличия и блокирование средств плательщика (предавторизация); далее, на втором этапе, компания либо подтверждает необходимость списания средств, либо отменяет блокировку средств. Сумма списания может отличаться от суммы блокировки в меньшую сторону. * __Холдирование (Блокировка средств)__ - Состояние суммы средств, предназначенных для возмещения по проведенной операции, с момента успешной авторизации до момента завершения расчетов между банками-участниками. На данном этапе средства еще находятся на счете Плательщика, но уже недоступны для использования на карте. * __Возврат средств (Refund)__ — частичный или полный возврат денежных средств Плательщика в случае его отказа от получения товара/услуг или его возврата. Возврат — это офлайн-операция, которая производится после списания денежных средств с Плательщика. Сроки возмещения, как правило, зависят от банка-эмитента и могут достигать 30 дней. * __Отмена операции оплаты (Reversal)__ — операция снятия (отмены) удержания денежных средств Плательщика. Отмена — это онлайн-операция, то есть эмитент карты сразу получает запрос на разблокировку суммы. Отмена может быть произведена до начала взаиморасчётов банков-участников, поэтому доступна ограниченное время. * __Связка__ — соответствие между Плательщиком и платёжными реквизитами карты (номер карты или токена и срок его действия). * __3-D Secure (3DS)__ — протокол дополнительной аутентификации Плательщика, основанный на концепции трёх доменов: эквайрера, эмитента и совместимости. * __Access Control Server (ACS)__ — элемент инфраструктуры 3-D Secure, обеспечивающий аутентификацию Плательщика на стороне банка-эмитента.  * __MPI, 3DS Server__ — элемент инфраструктуры 3-D Secure на стороне банка-эквайрера или Клиента. * __Фискализация__ (__54-ФЗ__) - процедура формирования фискального чека по успешно оплаченному Заказу. В данное понятие входит как формирование чека по успешной оплате, так и формирование чека возврата, закрывающего чека и т.д. * __ФФД__ - Формат Фискальных Документов. Стандарт Федеральной Налоговой Службы, согласно которому формируются все фискальные чеки.  ## Обработка сообщений  * Координаты подключения. Информация о координатах подключения к тестовой среде также доступна в индивидуальном разделе для каждого сервиса (в правой части страницы).  <span style=\"color:red;\">__Внимание!__</span> Для корректного взаимодействия со шлюзом необходимо [установить сертификат НУЦ Минцифры](https://www.sberbank.com/ru/certificates).  <span style=\"color:red;\">__Внимание!__</span> На тестовом контуре предусмотрены технические окна: в будние дни зарезервированы временные интервалы 9:00 - 10:00 и 18:00 - 20:00 в течение которых могут осуществляться работы по внедрению функционала на тестовый стенд. Стабильность работоспособности контура в это время не гарантируется.  Тестовая среда: https://ecomtest.sberbank.ru/ecomm/gw/partner/api/v1/.  Боевая среда: https://ecommerce.sberbank.ru/ecomm/gw/partner/api/v1/. * Платёжный шлюз представляет HTTP REST сервисы методом POST, с передачей в заголовках \"Content-Type: application/json\" и набором символов в кодировке UTF-8. Сообщения передаются в формате JSON (RFC 7159); * Наименования объектов в сервисах передаются с учетом регистра; * При взаимодействии используется протокол TLS версии 1.2; * После регистрации Клиента, предоставляются логин и пароль, который необходимо использовать при подключении к ПШ; * Для взаимодействия с сервисами ПШ требуется [установить сертификат НУЦ Минцифры](https://www.sberbank.com/ru/certificates).      ## Сценарии проведения платежей  ### Ввод реквизитов на стороне Клиента без 3DS на стороне Шлюза <a href='img/sequence_external_card_no_3DS.png' target='_blank'><img src='img/sequence_external_card_no_3DS.png'></a>  ### Ввод реквизитов на стороне Клиента c 3DS на стороне Шлюза <a href='img/sequence_external_card_3DS.png' target='_blank'><img src='img/sequence_external_card_3DS.png'></a>  ### Ввод реквизитов на стороне Клиента с упрощённым 3DS на стороне Шлюза <a href='img/sequence_external_card_simplified_3DS.png' target='_blank'><img src='img/sequence_external_card_simplified_3DS.png'></a>  ### Ввод реквизитов на стороне Шлюза <a href='img/sequence_payment_page.png' target='_blank'><img src='img/sequence_payment_page.png'></a>  ### Оплата с использованием связок  Общий алгоритм проведения оплаты по связке.  Сценарий разбит на два этапа:  ##### 1. Создание связки.   <a href='img/sequence_binding_create.png' target='_blank'><img src='img/sequence_binding_create.png'></a>  Ниже приведено краткое описание алгоритма создания связки.   1.1. После получения согласия со стороны Плательщика на дальнейшее использование данных карты для проведения оплат, Клиент регистрирует заказ с помощью registerPreAuth.do (register.do) с обязательной передачей параметра clientId.   <span style=\"color:red;\">__Внимание!__</span> В случае отсутствия указанного параметра в запросе связка не будет создана.  Рекомендуется использовать registerPreAuth.do во избежание списания средств по заказу.  В запросе так же может быть передан features=VERIFY. В этом случае сумма заказа должна составлять 0 рублей 0 копеек, средства с Плательщика не списываются. При этом сохраняется проведение всех необходимых проверок. Данный способ регистрации заказа является наиболее корректным для формирования связок.  1.2. Плательщик оплачивает заказ со всеми аттрибутами: вводом карточных данных и 3DS или оплатой операции через SberPay.  1.3. При успешной оплате заказа будет создана связка, идентификатор которой можно будет получить с помощью запросов getOrderStatusExtended.do и/или getBindings.do.  1.4. Опциональный шаг. При необходимости возврата средств по заказу (при авторизации на сумму, отличную от 0 рублей 0 копеек) может быть направлен запрос reverse.do. Отмена требуется для предотвращения фактического списания средств в случае использования технической операции для привязки карты.  ___Создание связки завершено.___  ##### 2. Оплата с использованием связки  <a href='img/sequence_binding_payment.png' target='_blank'><img src='img/sequence_binding_payment.png'></a>  Ниже приведено краткое описание алгоритма проведения оплаты с использованием имеющейся связки.  Доступно несколько путей оплаты, инициатором которой может выступать как Плательщик, так и Клиент.  1. Инициатором выступает Клиент.  Способ 1.  1.1.1. Клиент отправляет запрос recurrentPayment.do.  1.1.2. Платежный шлюз обогащает запрос данными карты, соответствующими полученному от Клиента bindingId.  1.1.3. Проводится авторизация с использованием данных карт, заполненных в п. 1.1.2.  1.1.4. Клиенту направляется результат авторизации.  Способ 2.  1.2.1. Клиент регистрирует заказ с помощью register.do / registerPreAuth.do с обязательной передачей параметра clientId.  1.2.2. Инициируется оплата заказа с помощью paymentOrderBinding.do с передачей параметра bindingId.  <span style=\"color:red;\"> __Внимание!__ </span> Параметр bindingId должен соответствовать переданному при регистрации заказа clientId. В случае попытки оплаты связкой, созданной для другого clientId вернется ошибка \"Заказ не может быть оплачен данной связкой\"  1.2.3. Платежный шлюз проверяет соответствие clientId и bindingId. При корректном результате проверки Платежный шлюз обогащает запрос данными карты, соответствующими переданному значению bindingId.  1.2.4. Проводится авторизация с использованием данных карт, заполненных в п. 1.2.3.  1.2.5. Клиенту направляется результат авторизации.  2. Инициатором выступает Плательщик.  2.1. Плательщик выбирает оплату сохраненной картой.  2.2. Клиент регистрирует заказ с помощью register.do / registerPreAuth.do с обязательной передачей параметра clientId.  2.3. Инициируется оплата заказа с помощью paymentOrderBinding.do с передачей параметра bindingId.  <span style=\"color:red;\"> __Внимание!__</span> Параметр bindingId должен соответствовать переданному при регистрации заказа clientId. В случае попытки оплаты связкой, созданной для другого clientId вернется ошибка \"Заказ не может быть оплачен данной связкой\"  2.4. Платежный шлюз проверяет соответствие clientId и bindingId. При корректном результате проверки Платежный шлюз обогащает запрос данными карты, соответствующими переданному значению bindingId.  2.5. Проводится авторизация с использованием данных карт, заполненных в п. 1.2.3.  2.6. Клиенту направляется результат авторизации.  2.7. Клиент оповещает Плательщика о результате авторизации.    **Внимание!** При несоответствии clientId и bindingId Клиенту возвращается ошибка \"Заказ не может быть оплачен данной связкой\".  ## Повышение конверсии платежей В сфере электронной коммерции конверсия является одним из важнейших показателей. При корректной интеграции и интуитивном клиентском пути одним из основных способов улучшения показателей является передача дополнительных параметров.  Дополнительные параметры позволяют получить более полную информацию о клиентах и их платежных операциях, позволяя весомо снизить риски мошенничества и исключить избыточные блокировки операций со стороны Банка, НСПК и иных эмитентов. Передача дополнительных параметров доступна при регистрации заказа и в сервисах оплаты в блоках __jsonParams__ или __additionalParameters__ в соответствии с описанием сервиса в документации.  __Передача корзины и идентификатора аккаунта плательщика__ партнера являются наиболее весомыми факторами, позволяющими повысить конверсию. Передача корзины заказа может использоваться без функционала фискализации.  Дополнительные параметры могут пересекаться с параметрами 3DS и в большинстве случаев влияют на результат аутентификации плательщика, повышая вероятность работы по frictionless flow.    ## Состояния заказа в Шлюзе <a href='img/state_orderStatus.png' target='_blank'><img src='img/state_orderStatus.png'></a>  ## Описание кодов ответа Шлюза  Каждый заказ имеет 3 попытки оплаты до истечения срока действия заказа (по умолчанию — 20 минут, значение может быть указано при регистрации заказа). |actionCode|actionCodeDescription                                                                                                              |Расшифровка кода ответа                                                                                                                                                                    |Рекомендация для Клиента/Плательщика                                                 |----------|-----------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------ |-5031     |_Ошибка при оплате СБП_ Подписка клиента не найдена |-3101     |                                                                                                                                   |Плательщик запретил выполнение операций по данной связке                                                                                                                                   |Повторить оплату с использованием альтернативного инструмента платежа |-3100     |Связка деактивирована                                                                                                              |Повторить оплату с использованием альтернативного инструмента платежа |-2020     |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Полученный в операции ECI не соответствует допустимым значениям для данной МПС                                                                                                             |Повторить оплату с использованием альтернативного инструмента платежа |-2019     |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Получена ошибка в процессе обработки 3-D Secure сообщений                                                                                                                                  |Повторить оплату с использованием альтернативного инструмента платежа |-2018     |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Недоступность Directory Server МПС                                                                                                                                                         |Повторить попытку позже (но в пределах лимита времени, отведенного на оплату заказа) или использовать альтернативный инструмент оплаты заказа |-2017     |Операция отклонена. Обратитесь в магазин                                                                                           |Плательщик не аутентифицирован (статус 3-D Secure не Y)                                                                                                                                    |Не пройдена 3ds-аутентификация держателя карты. Повторить оплату с использованием альтернативного инструмента платежа |-2016     |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Невозможно провести аутентификацию Плательщика (статус 3-D Secure U)                                                                                                                       |Возникла ошибка во время проверки возможности проведения 3ds-аутентификация держателя карты в банке-эмитенте. Необходимо повторить попытку или использовать альтернативный инструмент оплаты заказа |-2015     |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Получена ошибка в процессе обработки 3-D Secure сообщений                                                                                                                                  |Повторить оплату с использованием альтернативного инструмента платежа |-2013     |Исчерпаны попытки оплаты                                                                                                           |Исчерпаны попытки оплаты                                                                                                                                                                   |Для данного заказа превышено установленное количество попыток оплаты. Необходимо создать новый заказ |-2011     |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Невозможно провести аутентификацию Плательщика (статус 3-D Secure U)                                                                                                                       |Возникла ошибка во время проверки возможности проведения 3ds-аутентификация держателя карты в банке-эмитенте. Необходимо повторить попытку или использовать альтернативный инструмент оплаты заказа |-2010     |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Ошибка при валидации 3-D Secure сообщений (несовпадение XID)                                                                                                                               |Повторить оплату с использованием альтернативного инструмента платежа |-2007     |Истек срок ожидания ввода данных                                                                                                   |Истек срок, отведенный на оплату заказа с момента регистрации платежа (таймаут по умолчанию - 20 мин, продолжительность может быть указана при создании заказа)                        |Необходимо создать новый заказ |-2006     |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Аутентификация Плательщика завершена неуспешно (статус 3-D Secure N)                                                                                                                       |Аутентификация держателя карты в банке-эмитенте прошла неуспешно. Необходимо повторить попытку или использовать альтернативный инструмент оплаты заказа |-2005     |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Ошибка при валидации 3-D Secure сообщений                                                                                                                                                  |Аутентификация держателя карты в банке-эмитенте прошла неуспешно. Необходимо повторить попытку или использовать альтернативный инструмент оплаты заказа |-100      |                                                                                                                                   |Не было попыток оплаты                                                                                                                                                                     |Необходимо оплатить заказ |-99       |_Ошибка при оплате СБП_ Операция в обработке. Для операций Оплата/возврат СБП, Оплата с прерыванием и отмены/возвраты по QR POS    |Транзакция в обработке                                                                                                                                                                     |Действий не требуется |0         |                                                                                                                                   |Платеж успешно прошел                                                                                                                                                                      |Действий не требуется |1         |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Для успешного завершения транзакции требуется подтверждение личности                                                                                                                       |Держателю карты необходимо обратиться в банк-эмитент для подтверждения операции |5         |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Отказ сети проводить транзакцию                                                                                                                                                            |Повторить оплату с использованием альтернативного инструмента платежа |7         |Операция отклонена. Обратитесь в магазин                                                                                           |Изъять карту. Мошенничество                                                                                                                                                                |Повторить оплату с использованием альтернативного инструмента платежа |12        |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Предпринята попытка выполнить транзакцию на сумму, превышающую лимит, заданный банком-эмитентом                                                                                            |Отклонение запроса процессингом банка-эмитента по причине несоответствия суммы операции условиям ее проведения. Оплату заказа можно повторить с использованием альтернативного инструмента платежа |13        |Операция отклонена. Обратитесь в магазин                                                                                           |Неверно указана сумма транзакции                                                                                                                                                           |Повторить оплату с использованием альтернативного инструмента платежа |14        |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Неверный номер карты                                                                                                                                                                       |Проверить реквизиты карты или использовать другой инструмент для оплаты заказа. При получении ответа при оплате связкой — необходимо удалить связку |15        |Ошибка проведения платежа. Попробуйте позднее. Если данная ошибка возникла повторно, обратитесь в Ваш банк для разъяснения причин  |МПС не смогла определить эмитента карты                                                                                                                                                    |Повторить оплату с использованием альтернативного инструмента платежа |31        |Нет связи с банком. Повторите позже                                                                                                |Нет связи с банком, выпустившим карту                                                                                                                                                      |Повторить позже или использовать другой инструмент/метод оплаты |41        |Операция отклонена. Обратитесь в магазин                                                                                           |Изъять карту. Карта утеряна                                                                                                                                                                |В процессинге банка-эмитента карта помечена как утерянная. Следует использовать альтернативный инструмент платежа. При получении ответа при оплате связкой — необходимо удалить связку |43        |Операция отклонена. Обратитесь в магазин                                                                                           |Изъять карту. Карта украдена                                                                                                                                                               |В процессинге банка-эмитента карта помечена как украденная. Следует использовать альтернативный инструмент платежа. При получении ответа при оплате связкой — необходимо удалить связку |53        |Операция отклонена. Обратитесь в магазин                                                                                           |Карты не существует в системах процессинга                                                                                                                                                 |Отказ от процессинга банка-эмитента по причине закрытия счета или запроса или неверного типа счета. Оплату заказа можно повторить с использованием альтернативного инструмента платежа. При получении ответа при оплате связкой — необходимо удалить связку |61        |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Предпринята попытка выполнить транзакцию на сумму, превышающую дневной лимит, заданный банком-эмитентом                                                                                    |Плательщику рекомендуется проверить установленные ограничения в банке-эмитенте или повторить оплату с использованием альтернативного инструмента платежа |62        |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Карта заблокирована                                                                                                                                                                        |В процессинге банка-эмитента на карту наложены ограничения. Оплату заказа можно повторить с использованием альтернативного инструмента платежа |65        |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Превышен лимит на число транзакций: клиент выполнил максимально разрешенное число транзакций в течение лимитного цикла и пытается провести еще одну, либо клиентом самостоятельно установлено ограничение на выполнение операций без 3DS аутентификации                                        |Плательщику рекомендуется проверить установленные ограничения в банке-эмитенте или повторить оплату с использованием альтернативного инструмента платежа |75        |Операция отклонена. Обратитесь в магазин                                                                                           |Превышено допустимое число попыток ввода ПИН. Вероятно карта временно заблокирована                                                                                                        |Оплату заказа можно повторить с использованием альтернативного инструмента платежа |76        |Операция отклонена. Обратитесь в магазин                                                                                           |Не найдена транзакция (в случае завершения, отмены или возврата)                                                                                                                           |Требуется создание нового заказа |81        |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Отказ в проведении операции со стороны банка-эмитента                                                                                                                                      |Проверить реквизиты карты или использовать другой инструмент для оплаты заказа |82        |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Некорректный CVC                                                                                                                                                                           |Проверить реквизиты карты или использовать другой инструмент для оплаты заказа |93        |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Транзакция незаконна                                                                                                                                                                       |Попытка провести транзакцию, нарушающую требования законодательства. Клиенту рекомендуется сообщить об отказе в выполнении операции без детализации причины |94        |Операция отклонена. Обратитесь в магазин                                                                                           |Получен дубликат транзакции (в случае завершения или отмены)                                                                                                                               |Требуется уточнить статус обработки |96        |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Невозможно провести операцию                                                                                                                                                               |Повторить позже или использовать другой инструмент/метод оплаты |101       |Операция отклонена. Проверьте введенные данные, достаточность средств на карте и повторите операцию                                |Истек срок действия карты                                                                                                                                                                  |Рекомендовать держателю проверить корректность введенного срока действия карты и повторить оплату, либо использовать альтернативный инструмент оплаты заказа. При получении ответа при оплате связкой — необходимо удалить связку |103       |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Нет связи с банком-бмитентом                                                                                                                                                               |Повторить попытку позже (но в пределах лимита времени, отведенного на оплату заказа) или использовать альтернативный инструмент оплаты заказа |104       |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Попытка выполнения операции по счету, на использование которого наложены ограничения                                                                                                       |В процессинге банка-эмитента на карту наложены ограничения. Оплату заказа можно повторить с использованием альтернативного инструмента платежа |106       |Операция отклонена. Обратитесь в магазин                                                                                           |Некорректный ПИН. Вероятно карта временно заблокирована                                                                                                                                    |Оплату заказа можно повторить с использованием альтернативного инструмента платежа |107       |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Следует обратиться к банку-эмитенту                                                                                                                                                        |Оплату заказа можно повторить с использованием альтернативного инструмента платежа |109       |Операция отклонена. Обратитесь в магазин / _Ошибка при оплате СБП_ Оплата в ТСТ приостановлена                                     |Неверно указан идентификатор мерчанта/терминала или АСС заблокирован на уровне процессинга                                                                                                 |Клиенту необходимо связаться с Банком для уточнения причин |110       |_Ошибка при оплате СБП_ Некорректный формат запроса или данные не найдены                                                          |Ошибка при формировании запроса                                                                                                                                                            |Клиенту необходимо проверить корректность использования параметров в запросе |111       |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Неверный номер карты                                                                                                                                                                       |Проверить реквизиты карты или использовать другой инструмент для оплаты заказа. При получении ответа при оплате связкой — необходимо удалить связку |116       |Операция отклонена. Проверьте введенные данные, достаточность средств на карте и повторите операцию                                |Сумма транзакции превышает доступный остаток средств на выбранном счете                                                                                                                    |Рекомендовать держателю карты проверить достаточность средств на счете используемой карты, повторить попытку |118       |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Сервис не разрешён (отказ от банка-эмитента)                                                                                                                                               |В настоящее время данный код не используется |120       |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Отказ в проведении операции - транзакция не разрешена эмитентом                                                                                                                            |Одна из возможных причин – установленное на уровне продукта ограничение в процессинге банка-эмитента. Оплату заказа можно повторить с использованием альтернативного инструмента платежа |125       |Операция отклонена. Проверьте введенные данные, достаточность средств на карте и повторите операцию                                |Неверный номер карты. Попытка возврата на сумму больше холда, попытка возврата нулевой суммы                                                                                               |Проверить реквизиты карты или использовать другой инструмент для оплаты заказа |239       |Операция отклонена. По требованию банка, выпустившего карту, необходимо отменить подписку                                          |Банк, выпустивший карту, отклонил авторизацию и направил код ответа, подразумевающий отмену подписки, по которой направлялась авторизация                                                  |Проверить реквизиты карты или использовать другой инструмент для оплаты заказа. При получении ответа при оплате связкой — необходимо удалить связку |258       |_Ошибка при оплате СБП_ ТСТ не найдено в системе                                                                                   |Неверно указан идентификатор терминала.                                                                                                                                                    |Клиенту необходимо связаться с Банком для уточнения причин |400       |                                                                                                                                   |Реверсал обработан                                                                                                                                                                         |Успешная отмена. Действий не требуется |902       |Операция отклонена. Обратитесь в банк, выпустивший карту  / _В случае операции по СБП_ Операция не была проведена успешно          |Ограничение по карте (владелец карты пытается выполнить транзакцию, которая для него не разрешена)                                                                                         |Ошибка при обработке транзакции в процессинге банка-эмитента. Оплату заказа можно повторить с использованием альтернативного инструмента платежа |904       |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Ошибочный формат сообщения с точки зрения банка эмитента.                                                                                                                                  |Повторить оплату с использованием альтернативного инструмента платежа |909       |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Невозможно провести операцию                                                                                                                                                               |Повторить позже или использовать другой инструмент/метод оплаты |910       |Нет связи с банком. Повторите позже                                                                                                |Банк-эмитент недоступен                                                                                                                                                                    |Повторить позже или использовать другой инструмент/метод оплаты |913       |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Неверный формат сообщения (Неправильный формат транзакции с точки зрения сети)                                                                                                             |При регистрации заказа был указан неверный код валюты. Необходимо создать новый заказ с корректной валютой. |914       |Операция отклонена. Обратитесь в магазин / _В случае операции по СБП_ Оригинальный заказ для отмены не найден                      |Не найдена транзакция (когда посылается завершение или отмена или возврат)                                                                                                                 |Требуется создание нового заказа |999       |Операция отклонена. Обратитесь в магазин / _В случае операции по СБП_ подозрительная операция                                      |Отсутствует начало авторизации транзакции. Отклонено по причине мошенничества или ошибка 3-D Secure                                                                                        |Возможная причина – превышена допустимая разница по времени проведения операции и ее отмены/завершения. Для возврата средств держателю карты необходимо использовать операцию возврата. |1001      |Не получен ответ от банка. Повторите позже                                                                                         |Пусто (Выставляется в момент регистрации транзакции, т.е. когда еще по транзакции не было введено данных карт)                                                                             |Использовать другой инструмент/метод оплаты |1004      |_Ошибка при оплате СБП_ Операция не разрешена партнеру                                                                             |Ошибка при проведении операции (наиболее вероятная причина - не установлены соответствующие разрешения на терминале)                                                                       |Клиенту необходимо связаться с Банком для уточнения причин |1014      |Операция отклонена. Обратитесь в магазин                                                                                           |Код отказа платёжного шлюза по умолчанию                                                                                                                                                   |Повторить позже или использовать другой инструмент/метод оплаты |1015      |Операция отклонена. Проверьте введенные данные, достаточность средств на карте и повторите операцию                                |Введены неправильные параметры карты                                                                                                                                                       |Проверить реквизиты карты или использовать другой инструмент для оплаты заказа |1018      |Не получен ответ от банка. Повторите позже                                                                                         |Таймаут в процессинге Не удалось отправить                                                                                                                                                 |Повторить позже или использовать другой инструмент/метод оплаты |1019      |Не получен ответ от банка. Повторите позже                                                                                         |Таймаут в процессинге Удалось отправить, но не получен ответ от банка                                                                                                                      |Повторить позже или использовать другой инструмент/метод оплаты |2002      |Операция отклонена. Обратитесь в магазин / _В случае операции по СБП_ Нарушена последовательность запросов                         |Неверная операция                                                                                                                                                                          |Попытка завершить оплату в двухстадийном сценарии при неуспешно обработанной предварительной авторизации. Необходимо создать новый заказ |2003      |Операция отклонена. Обратитесь в магазин                                                                                           |Операции без 3-D Secure запрещены Клиенту                                                                                                                                                  |Оплата без дополнительной аутентификации держателей карт (3ds) не разрешена для магазина и попытка аутентификации завершилась неуспешно. Рекомендуется использовать другой инструмент/метод оплаты |2004      |Операция отклонена. Обратитесь в магазин                                                                                           |Оплата через SSL без ввода CVС2 запрещена                                                                                                                                                  |Оплата без ввода проверочного кода с карты не разрешена для магазина. Повторить оплату заказа с обязательным вводом проверочного кода карты (CVC2/CVV2/CVP2) держателем  |2005      |Операция отклонена. Обратитесь в магазин                                                                                           |Платеж не соответствует условиям проверки по 3-D Secure для Клиента                                                                                                                        |Использовать другой инструмент/метод оплаты |2007      |Операция отклонена. Обратитесь в магазин                                                                                           |Заказ уже оплачен                                                                                                                                                                          |Заказ был оплачен ранее. Действий не требуется |2009      |Операция отклонена. Обратитесь в магазин _В случае операции по СБП_ Сумма отмены/возврата больше суммы оригинальной транзакции     |Сумма возврата превышает сумму оплаты                                                                                                                                                      |Проверить сумму операции, скорректировать при необходимости и повторить возврат или завершение |2016      |Операция отклонена. Обратитесь в магазин                                                                                           |Мерчант не имеет разрешения на 3-D Secure, необходимое для проведения платежа                                                                                                              |Попытка провести операцию с 3ds-аутентификацией держателя карты в магазине, который не имеет установленного разрешения на это. Необходимо создать новый заказ   ## Описание кодов ошибок Шлюза |errorCode|errorMessage                                                                                                             |---------|------------------------------------------------------------------------------------------------------------------------------ |0        |Обработка запроса прошла без системных ошибок                                                                                  |0        |Запрос принят в обработку |1        |Заказ с таким номером уже обработан                                                                                            |1        |Заказ не может быть оплачен данной связкой                                                                                     |1        |Неверный номер карты                                                                                                           |1        |Срок действия карты неверен                                                                                                    |1        |Создание связок по данной карте недоступно                                                                                     |1        |Связка не найдена                                                                                                             |2        |Связка неактивна                                                                                                               |2        |Связка уже создана                                                                                                             |2        |Неверное состояние связки                                                                                                      |3        |Не найдена валюта с кодом:                                                                                                     |4        |В запросе не передан обязательный параметр или передан некорректный обязательный параметр                                      |4        |Username не соответствует значению при регистрации заказа                                                                      |4        |Номер заказа не может быть пуст                                                                                                |5        |Неверный параметр операции                                                                                                     |5        |Доступ запрещен                                                                                                                |5        |Операция запрещена                                                                                                             |5        |Мерчант не найден в системе                                                                                                    |5        |Терминал не найден в системе                                                                                                   |5        |Заказ не найден                                                                                                                |5        |Срок жизни заказа истек                                                                                                        |5        |Неверный статус заказа                                                                                                         |5        |Неверная сумма                                                                                                                 |5        |Нельзя провести частичную отмену более одного раза                                                                             |5        |Сумма завершения превышает сумму холдирования                                                                                  |5        |Общая сумма возвратов превышает сумму заказа                                                                                   |5        |Ошибка валидации данных запроса                                                                                                |5        |Ошибка при проведении операции                                                                                                 |5        |Ошибка при выполнении запроса                                                                                                  |5        |При отсутствующем orderId не заполнен OrderNumber                                                                              |5        |Превышено допустимое количество попыток оплаты                                                                                 |5        |Error, value of the request parameter                                                                                          |5        |Невозможно оплатить заказ - заблокирован другим действием                                                                      |5        |Невозможно завершить оплату заказа - заблокирован другим действием                                                             |5        |Невозможно отменить заказ - заблокирован другим действием                                                                      |5        |Операция отклонена. Проверьте введенные данные, достаточность средств на карте и повторите операцию. Происходит переадресация  |6        |Неверныий номер заказа                                                                                                          |7        |Не найдена успешная предавторизация                                                                                            |7        |Общая сумма возвратов превышает сумму заказа                                                                                   |7        |Не найдена успешная платежная операция                                                                                         |7        |Не найдена операция валидации                                                                                                  |7        |Ошибка при проведении платежа                                                                                                  |7        |Системная ошибка                                                                                                               |7        |System error                                                                                                                   |8        |Валюта в Корзине не совпадает с валютой заказа                                                                                 |8        |Сумма товарных позиций в Корзине не совпадает с общей суммой заказа                                                            |8        |Неверный формат корзины                                                                                                        |9        |Ошибка валидации данных |9        |Превышено кол-во попыток отправки уведомлений |9        |Некорректный номер телефона |9        |Заказ не найден |9        |Клиент не найден |9        |Клиент не верифицирован |9        |Недостаточно данных по клиенту |9        |Клиент неактивен |9        |Недостаточно данных по клиенту |9        |У найденного клиента есть отметка о смерти |9        |Неклассифицированный профиль клиента |9        |Найдено несколько клиентов |14       |Features указаны некорректно                                                                                                   |15       |Связка деактивирована клиентом                                                                                                  ## Тестовые карты |PAN карты              |Срок действия  |CVC/CVV  |Код ACS     |Комментарий                                                              | |-----------------------|---------------|---------|------------|-------------------------------------------------------------------------| |2202 2050 0001 2424    |05/28          |649      |-//-        |МИР 3DS 2.0 Frictionless, Authenticated                                  | |2202 2053 0006 8092    |05/26          |583      |111111      |МИР 3DS 2.0 Challenge, Authenticated. Фиксированный остаток - 100 рублей | |4006 8009 0096 2514    |05/26          |941      |111111      |VISA 3DS 1.0                                                             | |5469 9801 0004 8525    |05/26          |041      |111111      |MasterCard 3DS 1.0                                                       | |2202 2061 0004 0083    |05/26          |061      |-//-        |МИР, карта не вовлечена в 3DS                                            | |2202 2060 0027 0541    |05/28          |123      |111111      |МИР, корпоративная карта                                                 | |2202 2050 0006 0910    |06/28          |810      |111111      |МИР, карта для воспроизведения 116 ошибки (недостаточно средств)         |  |2202 2021 0759 3166    |06/22          |123      |111111      |МИР, карта для воспроизведения 101 ошибки (карта просрочена)             |   # Оплата с помощью SberPay При взаимодействии с Платежным шлюзом Клиенту доступен функционал оплаты с помощью SberPay в мобильном приложении \"Сбербанк-Онлайн\".  Имплементация функционала для достижения наилучших возможных показателей конверсии предусматривает соответствие платежного опыта Клиента с требованиями Банка,  описание функционала и примеры имплементации доступны в [ознакомительных материалах](promo/sponline.pdf).  ## Сценарий оплаты c помощью мобильного приложения \"Сбербанк-Онлайн\" __Обратите внимание!__ Работа с функционалом оплаты с помощью SberPay доступна в рамках сервисов, описанных в документации, но может быть  интегрирована Клиентом отдельно от других способов оплаты. При работе с функционалом SberPay использование блока \"sberbankOnlineAttributes\" в теле  запроса в jsonParams является __обязательным__ при регистрации заказа в сервисах register/registerPreAuth.  <a href='img/sequence_sberpay.png' target='_blank'><img src='img/sequence_sberpay.png'></a>  При интеграции сценария mweb2app на устройствах apple необходимо реализовывать процедуру перебора диплинков. Это связано с различными версиями приложений, установленных на устройствах пользователей. Подробная инструкция по реализации процедуры доступна в [документе](promo/deeplink_select_mWeb2app_3.pdf).  Описание требований к клиентскому опыту при реализации функционала SberPay в приложенном [документе](promo/Sberpay_expirience.pdf).  Описание интеграции функционала SberPay в приложенном [документе](promo/Sberpay_integration.pdf).  Руководство по логотипам для SberbankOnline в приложенном [документе](promo/Sberpay_logo.pdf).  Обработка операций и ответы Шлюза соответствуют описанию, размещенному в разделах [Описание кодов ответа Шлюза](doc#section/Obshaya-informaciya/Opisanie-kodov-otveta-Shlyuza)  и [Описание кодов ошибок Шлюза](doc#section/Obshaya-informaciya/Opisanie-kodov-oshibok-Shlyuza).  Пример оплаты с использованием SDK SberPay можно увидеть по [ссылке](https://rutube.ru/video/private/870dc0daa27c0808dfb5fc595f85387b/?p=G9FAeSseAPEUiyJ4B0fzLw)  ## Тестирование оплаты с помощью SberPay Дополнительно ознакомиться с процедурой тестирования SberPay можно в [документации](promo/sberpay_tfaq.pdf).  # Фискализация (54-ФЗ)  <span style=\"color:red;\">__Функционал доступен в режиме тестирования__</span>  В соответствии с Федеральным законом РФ №54-ФЗ c 01.07.2017 при осуществлении онлайн продаж, Продавец (в данной документации - Клиент), с помощью онлайн-кассы, обязан формировать кассовый чек и направлять его в ФНС и покупателю. В целях исполнения данного требования ПАО Сбербанк разработан механизм интеграции с онлайн-кассами, позволяющий упростить для Клиента данную процедуру. На текущий момент Платежным шлюзом поддерживаются только кассы \"АТОЛ Онлайн\" с версиями ФФД 1.05 и 1.2.  ## Доступный функционал  <span style=\"color:red;\">__Функционал доступен в режиме тестирования__</span>   - Отправка данных онлайн-кассе для формирования чеков в форматах ФФД 1.05 и 1.2; - Формирование чеков прихода, возврата прихода (в том числе - частичного);  - Возможность переотправки неуспешного чека с изменением корзины; - Переотправка чека в случае возникновения ошибки кассы или при таймауте отправки; - Создание чека отдельно от финансовой операции (закрывающий чек); - Возможность разделения чека на несколько, в случае превышения максимального размера; - Получение статуса чека с помощью callback уведомления и/или отдельным API запросом.  ## Условия формирования чеков Для успешной регистрации кассового чека необходимо выполнение следующих условий:   - В запросах register, registerPreAuth, deposit, reverse, refund должна содержаться корзина (блок orderBundle), с обязательным присутствием параметров ffdVersion и receiptType;   - Функционал фискализации заказов подключен и успешно настроен для мерчанта: учетные данные для подключения онлайн-кассы корректны и внесены в настройки.  ## Подключение кассы Для подключения кассы необходимо: 1. Зарегистрироваться в сервисе [\"АТОЛ Онлайн\"](https://sberbank.atol.ru/); 2. Самостоятельно, в соответствии с [инструкцией](https://atol.online/upload/iblock/83b/0s367ftz1ydlc8cf1v55vljqt3cr16t2/Atol_Pamyatka_APRIL_22.pdf) или с помощью сотрудников АТОЛ Онлайн зарегистрируйте кассу в Федеральной Налоговой Службе (ФНС) и у Оператора Фискальных Данных (ОФД); 3. В личном кабинете АТОЛ Онлайн получите учетные данные кассы (логин, пароль, код группы ККТ); 4. Для настройки интеграции направьте запрос в службу технической поддержки интернет-эквайринга Сбербанка. В запросе следует указать учетные данные кассы и используемую версию ФФД.  ## Сценарии работы с чеками <a href='img/ofd.png' target='_blank'><img src='img/ofd.png'></a>   # Личный кабинет  Ниже предоставлены несколько видео, демонстрирующих работу в личном кабинете интернет-эквайринга Сбера.  * [Создание ссылки на оплату](https://rutube.ru/video/private/522fb74a57e3f3a7541bee7aa47b2564/?p=ekzN2KTEB0nlmK1DVN7B6w) * [Отмена и завершение двухстадийных заказов](https://rutube.ru/video/private/43c31ecb7980276f62e21507c96c8639/?p=d3ZifcopU_A_DmGk4uVs5g) * [Сброс пароля от шлюза и самостоятельное изменение настроек](https://rutube.ru/video/private/10f2d9096183c5bf4008b710de33ea57/?p=qmXWqHqGn0K9OTwjv8Tj-g) * [Запрос на процессирование операции (на примере отмены возврата)](https://rutube.ru/video/private/441ae221d7dc3dee0986a77a39526a58/?p=TnEhBUNQAnjok0D-VvMbXQ) * [Формирование отчетности](https://rutube.ru/video/private/7600e50bc23d3130d4668768263aa68c/?p=7OH_ooemExrdrwYToQufMw) * [Оформление частичного возврата по заказу](https://rutube.ru/video/private/75228c725912366ce6f08566527f0d6c/?p=zVEMMn2iYH8fY10Oh12OCQ) * [Поиск по номеру заказа только для просмотра (пользователь с ограниченными правами)](https://rutube.ru/video/private/1c73df0c504afc96f73e86fcea46239f/?p=54rC72CO6iqpsoil_9It1g)
 *
 * The version of the OpenAPI document: 1.0.5
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SberPay\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SberPay\ObjectSerializer;

/**
 * TdsAdditionalAttributes Class Doc Comment
 *
 * @description Дополнительные параметры платежа для проведения 3-D Secure аутентификации на стороне ПШ
 * @package  SberPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class TdsAdditionalAttributes implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'tdsAdditionalAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'bill_addr_city' => 'string',
        'bill_addr_country' => 'string',
        'bill_addr_line1' => 'string',
        'bill_addr_line2' => 'string',
        'bill_addr_line3' => 'string',
        'bill_addr_post_code' => 'string',
        'bill_addr_state' => 'string',
        'ship_addr_city' => 'string',
        'ship_addr_country' => 'string',
        'ship_addr_line1' => 'string',
        'ship_addr_line2' => 'string',
        'ship_addr_line3' => 'string',
        'ship_addr_post_code' => 'string',
        'ship_addr_state' => 'string',
        'mobile_phone' => 'string',
        'work_phone' => 'string',
        'home_phone' => 'string',
        'mri_delivery_email_address' => 'string',
        'mri_delivery_timeframe' => 'string',
        'mri_gift_card_amount' => 'string',
        'mri_gift_card_count' => 'string',
        'mri_gift_card_curr' => 'string',
        'mri_pre_order_date' => 'string',
        'mri_pre_order_purchase_ind' => 'string',
        'mri_reorder_items_ind' => 'string',
        'mri_ship_indicator' => 'string',
        'three_ds_req_prior_auth_data' => 'string',
        'three_ds_req_prior_auth_method' => 'string',
        'three_ds_req_prior_auth_timestamp' => 'string',
        'three_ds_req_prior_ref' => 'string',
        'acct_id' => 'string',
        'ch_acc_age_ind' => 'string',
        'ch_acc_change' => 'string',
        'ch_acc_change_ind' => 'string',
        'ch_acc_date' => 'string',
        'ch_acc_pw_change' => 'string',
        'ch_acc_pw_change_ind' => 'string',
        'nb_purchase_account' => 'string',
        'provision_attempts_day' => 'string',
        'txn_activity_day' => 'string',
        'txn_activity_year' => 'string',
        'payment_acc_age' => 'string',
        'payment_acc_ind' => 'string',
        'ship_address_usage' => 'string',
        'ship_address_usage_ind' => 'string',
        'ship_name_indicator' => 'string',
        'suspicious_acc_activity' => 'string',
        'three_ds_req_auth_data' => 'string',
        'three_ds_req_auth_method' => 'string',
        'three_ds_req_auth_timestamp' => 'string',
        'acct_type' => 'string',
        'trans_type' => 'string',
        'addr_match' => 'string',
        'three_ds_requestor_challenge_ind' => 'string',
        'purchase_instal_data' => 'string',
        'recurring_expiry' => 'string',
        'recurring_frequency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'bill_addr_city' => null,
        'bill_addr_country' => null,
        'bill_addr_line1' => null,
        'bill_addr_line2' => null,
        'bill_addr_line3' => null,
        'bill_addr_post_code' => null,
        'bill_addr_state' => null,
        'ship_addr_city' => null,
        'ship_addr_country' => null,
        'ship_addr_line1' => null,
        'ship_addr_line2' => null,
        'ship_addr_line3' => null,
        'ship_addr_post_code' => null,
        'ship_addr_state' => null,
        'mobile_phone' => null,
        'work_phone' => null,
        'home_phone' => null,
        'mri_delivery_email_address' => null,
        'mri_delivery_timeframe' => null,
        'mri_gift_card_amount' => null,
        'mri_gift_card_count' => null,
        'mri_gift_card_curr' => null,
        'mri_pre_order_date' => null,
        'mri_pre_order_purchase_ind' => null,
        'mri_reorder_items_ind' => null,
        'mri_ship_indicator' => null,
        'three_ds_req_prior_auth_data' => null,
        'three_ds_req_prior_auth_method' => null,
        'three_ds_req_prior_auth_timestamp' => null,
        'three_ds_req_prior_ref' => null,
        'acct_id' => null,
        'ch_acc_age_ind' => null,
        'ch_acc_change' => null,
        'ch_acc_change_ind' => null,
        'ch_acc_date' => null,
        'ch_acc_pw_change' => null,
        'ch_acc_pw_change_ind' => null,
        'nb_purchase_account' => null,
        'provision_attempts_day' => null,
        'txn_activity_day' => null,
        'txn_activity_year' => null,
        'payment_acc_age' => null,
        'payment_acc_ind' => null,
        'ship_address_usage' => null,
        'ship_address_usage_ind' => null,
        'ship_name_indicator' => null,
        'suspicious_acc_activity' => null,
        'three_ds_req_auth_data' => null,
        'three_ds_req_auth_method' => null,
        'three_ds_req_auth_timestamp' => null,
        'acct_type' => null,
        'trans_type' => null,
        'addr_match' => null,
        'three_ds_requestor_challenge_ind' => null,
        'purchase_instal_data' => null,
        'recurring_expiry' => null,
        'recurring_frequency' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'bill_addr_city' => false,
        'bill_addr_country' => false,
        'bill_addr_line1' => false,
        'bill_addr_line2' => false,
        'bill_addr_line3' => false,
        'bill_addr_post_code' => false,
        'bill_addr_state' => false,
        'ship_addr_city' => false,
        'ship_addr_country' => false,
        'ship_addr_line1' => false,
        'ship_addr_line2' => false,
        'ship_addr_line3' => false,
        'ship_addr_post_code' => false,
        'ship_addr_state' => false,
        'mobile_phone' => false,
        'work_phone' => false,
        'home_phone' => false,
        'mri_delivery_email_address' => false,
        'mri_delivery_timeframe' => false,
        'mri_gift_card_amount' => false,
        'mri_gift_card_count' => false,
        'mri_gift_card_curr' => false,
        'mri_pre_order_date' => false,
        'mri_pre_order_purchase_ind' => false,
        'mri_reorder_items_ind' => false,
        'mri_ship_indicator' => false,
        'three_ds_req_prior_auth_data' => false,
        'three_ds_req_prior_auth_method' => false,
        'three_ds_req_prior_auth_timestamp' => false,
        'three_ds_req_prior_ref' => false,
        'acct_id' => false,
        'ch_acc_age_ind' => false,
        'ch_acc_change' => false,
        'ch_acc_change_ind' => false,
        'ch_acc_date' => false,
        'ch_acc_pw_change' => false,
        'ch_acc_pw_change_ind' => false,
        'nb_purchase_account' => false,
        'provision_attempts_day' => false,
        'txn_activity_day' => false,
        'txn_activity_year' => false,
        'payment_acc_age' => false,
        'payment_acc_ind' => false,
        'ship_address_usage' => false,
        'ship_address_usage_ind' => false,
        'ship_name_indicator' => false,
        'suspicious_acc_activity' => false,
        'three_ds_req_auth_data' => false,
        'three_ds_req_auth_method' => false,
        'three_ds_req_auth_timestamp' => false,
        'acct_type' => false,
        'trans_type' => false,
        'addr_match' => false,
        'three_ds_requestor_challenge_ind' => false,
        'purchase_instal_data' => false,
        'recurring_expiry' => false,
        'recurring_frequency' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'bill_addr_city' => 'billAddrCity',
        'bill_addr_country' => 'billAddrCountry',
        'bill_addr_line1' => 'billAddrLine1',
        'bill_addr_line2' => 'billAddrLine2',
        'bill_addr_line3' => 'billAddrLine3',
        'bill_addr_post_code' => 'billAddrPostCode',
        'bill_addr_state' => 'billAddrState',
        'ship_addr_city' => 'shipAddrCity',
        'ship_addr_country' => 'shipAddrCountry',
        'ship_addr_line1' => 'shipAddrLine1',
        'ship_addr_line2' => 'shipAddrLine2',
        'ship_addr_line3' => 'shipAddrLine3',
        'ship_addr_post_code' => 'shipAddrPostCode',
        'ship_addr_state' => 'shipAddrState',
        'mobile_phone' => 'mobilePhone',
        'work_phone' => 'workPhone',
        'home_phone' => 'homePhone',
        'mri_delivery_email_address' => 'mriDeliveryEmailAddress',
        'mri_delivery_timeframe' => 'mriDeliveryTimeframe',
        'mri_gift_card_amount' => 'mriGiftCardAmount',
        'mri_gift_card_count' => 'mriGiftCardCount',
        'mri_gift_card_curr' => 'mriGiftCardCurr',
        'mri_pre_order_date' => 'mriPreOrderDate',
        'mri_pre_order_purchase_ind' => 'mriPreOrderPurchaseInd',
        'mri_reorder_items_ind' => 'mriReorderItemsInd',
        'mri_ship_indicator' => 'mriShipIndicator',
        'three_ds_req_prior_auth_data' => 'threeDSReqPriorAuthData',
        'three_ds_req_prior_auth_method' => 'threeDSReqPriorAuthMethod',
        'three_ds_req_prior_auth_timestamp' => 'threeDSReqPriorAuthTimestamp',
        'three_ds_req_prior_ref' => 'threeDSReqPriorRef',
        'acct_id' => 'acctId',
        'ch_acc_age_ind' => 'chAccAgeInd',
        'ch_acc_change' => 'chAccChange',
        'ch_acc_change_ind' => 'chAccChangeInd',
        'ch_acc_date' => 'chAccDate',
        'ch_acc_pw_change' => 'chAccPwChange',
        'ch_acc_pw_change_ind' => 'chAccPwChangeInd',
        'nb_purchase_account' => 'nbPurchaseAccount',
        'provision_attempts_day' => 'provisionAttemptsDay',
        'txn_activity_day' => 'txnActivityDay',
        'txn_activity_year' => 'txnActivityYear',
        'payment_acc_age' => 'paymentAccAge',
        'payment_acc_ind' => 'paymentAccInd',
        'ship_address_usage' => 'shipAddressUsage',
        'ship_address_usage_ind' => 'shipAddressUsageInd',
        'ship_name_indicator' => 'shipNameIndicator',
        'suspicious_acc_activity' => 'suspiciousAccActivity',
        'three_ds_req_auth_data' => 'threeDSReqAuthData',
        'three_ds_req_auth_method' => 'threeDSReqAuthMethod',
        'three_ds_req_auth_timestamp' => 'threeDSReqAuthTimestamp',
        'acct_type' => 'acctType',
        'trans_type' => 'transType',
        'addr_match' => 'addrMatch',
        'three_ds_requestor_challenge_ind' => 'threeDSRequestorChallengeInd',
        'purchase_instal_data' => 'purchaseInstalData',
        'recurring_expiry' => 'recurringExpiry',
        'recurring_frequency' => 'recurringFrequency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'bill_addr_city' => 'setBillAddrCity',
        'bill_addr_country' => 'setBillAddrCountry',
        'bill_addr_line1' => 'setBillAddrLine1',
        'bill_addr_line2' => 'setBillAddrLine2',
        'bill_addr_line3' => 'setBillAddrLine3',
        'bill_addr_post_code' => 'setBillAddrPostCode',
        'bill_addr_state' => 'setBillAddrState',
        'ship_addr_city' => 'setShipAddrCity',
        'ship_addr_country' => 'setShipAddrCountry',
        'ship_addr_line1' => 'setShipAddrLine1',
        'ship_addr_line2' => 'setShipAddrLine2',
        'ship_addr_line3' => 'setShipAddrLine3',
        'ship_addr_post_code' => 'setShipAddrPostCode',
        'ship_addr_state' => 'setShipAddrState',
        'mobile_phone' => 'setMobilePhone',
        'work_phone' => 'setWorkPhone',
        'home_phone' => 'setHomePhone',
        'mri_delivery_email_address' => 'setMriDeliveryEmailAddress',
        'mri_delivery_timeframe' => 'setMriDeliveryTimeframe',
        'mri_gift_card_amount' => 'setMriGiftCardAmount',
        'mri_gift_card_count' => 'setMriGiftCardCount',
        'mri_gift_card_curr' => 'setMriGiftCardCurr',
        'mri_pre_order_date' => 'setMriPreOrderDate',
        'mri_pre_order_purchase_ind' => 'setMriPreOrderPurchaseInd',
        'mri_reorder_items_ind' => 'setMriReorderItemsInd',
        'mri_ship_indicator' => 'setMriShipIndicator',
        'three_ds_req_prior_auth_data' => 'setThreeDsReqPriorAuthData',
        'three_ds_req_prior_auth_method' => 'setThreeDsReqPriorAuthMethod',
        'three_ds_req_prior_auth_timestamp' => 'setThreeDsReqPriorAuthTimestamp',
        'three_ds_req_prior_ref' => 'setThreeDsReqPriorRef',
        'acct_id' => 'setAcctId',
        'ch_acc_age_ind' => 'setChAccAgeInd',
        'ch_acc_change' => 'setChAccChange',
        'ch_acc_change_ind' => 'setChAccChangeInd',
        'ch_acc_date' => 'setChAccDate',
        'ch_acc_pw_change' => 'setChAccPwChange',
        'ch_acc_pw_change_ind' => 'setChAccPwChangeInd',
        'nb_purchase_account' => 'setNbPurchaseAccount',
        'provision_attempts_day' => 'setProvisionAttemptsDay',
        'txn_activity_day' => 'setTxnActivityDay',
        'txn_activity_year' => 'setTxnActivityYear',
        'payment_acc_age' => 'setPaymentAccAge',
        'payment_acc_ind' => 'setPaymentAccInd',
        'ship_address_usage' => 'setShipAddressUsage',
        'ship_address_usage_ind' => 'setShipAddressUsageInd',
        'ship_name_indicator' => 'setShipNameIndicator',
        'suspicious_acc_activity' => 'setSuspiciousAccActivity',
        'three_ds_req_auth_data' => 'setThreeDsReqAuthData',
        'three_ds_req_auth_method' => 'setThreeDsReqAuthMethod',
        'three_ds_req_auth_timestamp' => 'setThreeDsReqAuthTimestamp',
        'acct_type' => 'setAcctType',
        'trans_type' => 'setTransType',
        'addr_match' => 'setAddrMatch',
        'three_ds_requestor_challenge_ind' => 'setThreeDsRequestorChallengeInd',
        'purchase_instal_data' => 'setPurchaseInstalData',
        'recurring_expiry' => 'setRecurringExpiry',
        'recurring_frequency' => 'setRecurringFrequency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'bill_addr_city' => 'getBillAddrCity',
        'bill_addr_country' => 'getBillAddrCountry',
        'bill_addr_line1' => 'getBillAddrLine1',
        'bill_addr_line2' => 'getBillAddrLine2',
        'bill_addr_line3' => 'getBillAddrLine3',
        'bill_addr_post_code' => 'getBillAddrPostCode',
        'bill_addr_state' => 'getBillAddrState',
        'ship_addr_city' => 'getShipAddrCity',
        'ship_addr_country' => 'getShipAddrCountry',
        'ship_addr_line1' => 'getShipAddrLine1',
        'ship_addr_line2' => 'getShipAddrLine2',
        'ship_addr_line3' => 'getShipAddrLine3',
        'ship_addr_post_code' => 'getShipAddrPostCode',
        'ship_addr_state' => 'getShipAddrState',
        'mobile_phone' => 'getMobilePhone',
        'work_phone' => 'getWorkPhone',
        'home_phone' => 'getHomePhone',
        'mri_delivery_email_address' => 'getMriDeliveryEmailAddress',
        'mri_delivery_timeframe' => 'getMriDeliveryTimeframe',
        'mri_gift_card_amount' => 'getMriGiftCardAmount',
        'mri_gift_card_count' => 'getMriGiftCardCount',
        'mri_gift_card_curr' => 'getMriGiftCardCurr',
        'mri_pre_order_date' => 'getMriPreOrderDate',
        'mri_pre_order_purchase_ind' => 'getMriPreOrderPurchaseInd',
        'mri_reorder_items_ind' => 'getMriReorderItemsInd',
        'mri_ship_indicator' => 'getMriShipIndicator',
        'three_ds_req_prior_auth_data' => 'getThreeDsReqPriorAuthData',
        'three_ds_req_prior_auth_method' => 'getThreeDsReqPriorAuthMethod',
        'three_ds_req_prior_auth_timestamp' => 'getThreeDsReqPriorAuthTimestamp',
        'three_ds_req_prior_ref' => 'getThreeDsReqPriorRef',
        'acct_id' => 'getAcctId',
        'ch_acc_age_ind' => 'getChAccAgeInd',
        'ch_acc_change' => 'getChAccChange',
        'ch_acc_change_ind' => 'getChAccChangeInd',
        'ch_acc_date' => 'getChAccDate',
        'ch_acc_pw_change' => 'getChAccPwChange',
        'ch_acc_pw_change_ind' => 'getChAccPwChangeInd',
        'nb_purchase_account' => 'getNbPurchaseAccount',
        'provision_attempts_day' => 'getProvisionAttemptsDay',
        'txn_activity_day' => 'getTxnActivityDay',
        'txn_activity_year' => 'getTxnActivityYear',
        'payment_acc_age' => 'getPaymentAccAge',
        'payment_acc_ind' => 'getPaymentAccInd',
        'ship_address_usage' => 'getShipAddressUsage',
        'ship_address_usage_ind' => 'getShipAddressUsageInd',
        'ship_name_indicator' => 'getShipNameIndicator',
        'suspicious_acc_activity' => 'getSuspiciousAccActivity',
        'three_ds_req_auth_data' => 'getThreeDsReqAuthData',
        'three_ds_req_auth_method' => 'getThreeDsReqAuthMethod',
        'three_ds_req_auth_timestamp' => 'getThreeDsReqAuthTimestamp',
        'acct_type' => 'getAcctType',
        'trans_type' => 'getTransType',
        'addr_match' => 'getAddrMatch',
        'three_ds_requestor_challenge_ind' => 'getThreeDsRequestorChallengeInd',
        'purchase_instal_data' => 'getPurchaseInstalData',
        'recurring_expiry' => 'getRecurringExpiry',
        'recurring_frequency' => 'getRecurringFrequency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bill_addr_city', $data ?? [], null);
        $this->setIfExists('bill_addr_country', $data ?? [], null);
        $this->setIfExists('bill_addr_line1', $data ?? [], null);
        $this->setIfExists('bill_addr_line2', $data ?? [], null);
        $this->setIfExists('bill_addr_line3', $data ?? [], null);
        $this->setIfExists('bill_addr_post_code', $data ?? [], null);
        $this->setIfExists('bill_addr_state', $data ?? [], null);
        $this->setIfExists('ship_addr_city', $data ?? [], null);
        $this->setIfExists('ship_addr_country', $data ?? [], null);
        $this->setIfExists('ship_addr_line1', $data ?? [], null);
        $this->setIfExists('ship_addr_line2', $data ?? [], null);
        $this->setIfExists('ship_addr_line3', $data ?? [], null);
        $this->setIfExists('ship_addr_post_code', $data ?? [], null);
        $this->setIfExists('ship_addr_state', $data ?? [], null);
        $this->setIfExists('mobile_phone', $data ?? [], null);
        $this->setIfExists('work_phone', $data ?? [], null);
        $this->setIfExists('home_phone', $data ?? [], null);
        $this->setIfExists('mri_delivery_email_address', $data ?? [], null);
        $this->setIfExists('mri_delivery_timeframe', $data ?? [], null);
        $this->setIfExists('mri_gift_card_amount', $data ?? [], null);
        $this->setIfExists('mri_gift_card_count', $data ?? [], null);
        $this->setIfExists('mri_gift_card_curr', $data ?? [], null);
        $this->setIfExists('mri_pre_order_date', $data ?? [], null);
        $this->setIfExists('mri_pre_order_purchase_ind', $data ?? [], null);
        $this->setIfExists('mri_reorder_items_ind', $data ?? [], null);
        $this->setIfExists('mri_ship_indicator', $data ?? [], null);
        $this->setIfExists('three_ds_req_prior_auth_data', $data ?? [], null);
        $this->setIfExists('three_ds_req_prior_auth_method', $data ?? [], null);
        $this->setIfExists('three_ds_req_prior_auth_timestamp', $data ?? [], null);
        $this->setIfExists('three_ds_req_prior_ref', $data ?? [], null);
        $this->setIfExists('acct_id', $data ?? [], null);
        $this->setIfExists('ch_acc_age_ind', $data ?? [], null);
        $this->setIfExists('ch_acc_change', $data ?? [], null);
        $this->setIfExists('ch_acc_change_ind', $data ?? [], null);
        $this->setIfExists('ch_acc_date', $data ?? [], null);
        $this->setIfExists('ch_acc_pw_change', $data ?? [], null);
        $this->setIfExists('ch_acc_pw_change_ind', $data ?? [], null);
        $this->setIfExists('nb_purchase_account', $data ?? [], null);
        $this->setIfExists('provision_attempts_day', $data ?? [], null);
        $this->setIfExists('txn_activity_day', $data ?? [], null);
        $this->setIfExists('txn_activity_year', $data ?? [], null);
        $this->setIfExists('payment_acc_age', $data ?? [], null);
        $this->setIfExists('payment_acc_ind', $data ?? [], null);
        $this->setIfExists('ship_address_usage', $data ?? [], null);
        $this->setIfExists('ship_address_usage_ind', $data ?? [], null);
        $this->setIfExists('ship_name_indicator', $data ?? [], null);
        $this->setIfExists('suspicious_acc_activity', $data ?? [], null);
        $this->setIfExists('three_ds_req_auth_data', $data ?? [], null);
        $this->setIfExists('three_ds_req_auth_method', $data ?? [], null);
        $this->setIfExists('three_ds_req_auth_timestamp', $data ?? [], null);
        $this->setIfExists('acct_type', $data ?? [], null);
        $this->setIfExists('trans_type', $data ?? [], null);
        $this->setIfExists('addr_match', $data ?? [], null);
        $this->setIfExists('three_ds_requestor_challenge_ind', $data ?? [], null);
        $this->setIfExists('purchase_instal_data', $data ?? [], null);
        $this->setIfExists('recurring_expiry', $data ?? [], null);
        $this->setIfExists('recurring_frequency', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['bill_addr_city']) && (mb_strlen($this->container['bill_addr_city']) > 50)) {
            $invalidProperties[] = "invalid value for 'bill_addr_city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bill_addr_city']) && (mb_strlen($this->container['bill_addr_city']) < 1)) {
            $invalidProperties[] = "invalid value for 'bill_addr_city', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bill_addr_city']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['bill_addr_city'])) {
            $invalidProperties[] = "invalid value for 'bill_addr_city', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['bill_addr_country']) && (mb_strlen($this->container['bill_addr_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'bill_addr_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['bill_addr_country']) && (mb_strlen($this->container['bill_addr_country']) < 1)) {
            $invalidProperties[] = "invalid value for 'bill_addr_country', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bill_addr_country']) && !preg_match("/^\\d+$/", $this->container['bill_addr_country'])) {
            $invalidProperties[] = "invalid value for 'bill_addr_country', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['bill_addr_line1']) && (mb_strlen($this->container['bill_addr_line1']) > 50)) {
            $invalidProperties[] = "invalid value for 'bill_addr_line1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bill_addr_line1']) && (mb_strlen($this->container['bill_addr_line1']) < 1)) {
            $invalidProperties[] = "invalid value for 'bill_addr_line1', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bill_addr_line1']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['bill_addr_line1'])) {
            $invalidProperties[] = "invalid value for 'bill_addr_line1', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['bill_addr_line2']) && (mb_strlen($this->container['bill_addr_line2']) > 50)) {
            $invalidProperties[] = "invalid value for 'bill_addr_line2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bill_addr_line2']) && (mb_strlen($this->container['bill_addr_line2']) < 1)) {
            $invalidProperties[] = "invalid value for 'bill_addr_line2', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bill_addr_line2']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['bill_addr_line2'])) {
            $invalidProperties[] = "invalid value for 'bill_addr_line2', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['bill_addr_line3']) && (mb_strlen($this->container['bill_addr_line3']) > 50)) {
            $invalidProperties[] = "invalid value for 'bill_addr_line3', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bill_addr_line3']) && (mb_strlen($this->container['bill_addr_line3']) < 1)) {
            $invalidProperties[] = "invalid value for 'bill_addr_line3', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bill_addr_line3']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['bill_addr_line3'])) {
            $invalidProperties[] = "invalid value for 'bill_addr_line3', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['bill_addr_post_code']) && (mb_strlen($this->container['bill_addr_post_code']) > 16)) {
            $invalidProperties[] = "invalid value for 'bill_addr_post_code', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['bill_addr_post_code']) && (mb_strlen($this->container['bill_addr_post_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'bill_addr_post_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bill_addr_post_code']) && !preg_match("/^[ -~]*$/", $this->container['bill_addr_post_code'])) {
            $invalidProperties[] = "invalid value for 'bill_addr_post_code', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['bill_addr_state']) && (mb_strlen($this->container['bill_addr_state']) > 3)) {
            $invalidProperties[] = "invalid value for 'bill_addr_state', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['bill_addr_state']) && (mb_strlen($this->container['bill_addr_state']) < 1)) {
            $invalidProperties[] = "invalid value for 'bill_addr_state', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bill_addr_state']) && !preg_match("/^[ -~]*$/", $this->container['bill_addr_state'])) {
            $invalidProperties[] = "invalid value for 'bill_addr_state', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['ship_addr_city']) && (mb_strlen($this->container['ship_addr_city']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_addr_city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ship_addr_city']) && (mb_strlen($this->container['ship_addr_city']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_addr_city', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_addr_city']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['ship_addr_city'])) {
            $invalidProperties[] = "invalid value for 'ship_addr_city', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['ship_addr_country']) && (mb_strlen($this->container['ship_addr_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'ship_addr_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['ship_addr_country']) && (mb_strlen($this->container['ship_addr_country']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_addr_country', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_addr_country']) && !preg_match("/^\\d+$/", $this->container['ship_addr_country'])) {
            $invalidProperties[] = "invalid value for 'ship_addr_country', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ship_addr_line1']) && (mb_strlen($this->container['ship_addr_line1']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_addr_line1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ship_addr_line1']) && (mb_strlen($this->container['ship_addr_line1']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_addr_line1', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_addr_line1']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['ship_addr_line1'])) {
            $invalidProperties[] = "invalid value for 'ship_addr_line1', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['ship_addr_line2']) && (mb_strlen($this->container['ship_addr_line2']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_addr_line2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ship_addr_line2']) && (mb_strlen($this->container['ship_addr_line2']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_addr_line2', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_addr_line2']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['ship_addr_line2'])) {
            $invalidProperties[] = "invalid value for 'ship_addr_line2', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['ship_addr_line3']) && (mb_strlen($this->container['ship_addr_line3']) > 50)) {
            $invalidProperties[] = "invalid value for 'ship_addr_line3', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ship_addr_line3']) && (mb_strlen($this->container['ship_addr_line3']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_addr_line3', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_addr_line3']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['ship_addr_line3'])) {
            $invalidProperties[] = "invalid value for 'ship_addr_line3', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['ship_addr_post_code']) && (mb_strlen($this->container['ship_addr_post_code']) > 16)) {
            $invalidProperties[] = "invalid value for 'ship_addr_post_code', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['ship_addr_post_code']) && (mb_strlen($this->container['ship_addr_post_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_addr_post_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_addr_post_code']) && !preg_match("/^[ -~]*$/", $this->container['ship_addr_post_code'])) {
            $invalidProperties[] = "invalid value for 'ship_addr_post_code', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['ship_addr_state']) && (mb_strlen($this->container['ship_addr_state']) > 3)) {
            $invalidProperties[] = "invalid value for 'ship_addr_state', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['ship_addr_state']) && (mb_strlen($this->container['ship_addr_state']) < 1)) {
            $invalidProperties[] = "invalid value for 'ship_addr_state', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ship_addr_state']) && !preg_match("/^[ -~]*$/", $this->container['ship_addr_state'])) {
            $invalidProperties[] = "invalid value for 'ship_addr_state', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['mobile_phone']) && (mb_strlen($this->container['mobile_phone']) > 19)) {
            $invalidProperties[] = "invalid value for 'mobile_phone', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['mobile_phone']) && (mb_strlen($this->container['mobile_phone']) < 1)) {
            $invalidProperties[] = "invalid value for 'mobile_phone', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mobile_phone']) && !preg_match("/^[\\d\\-]*$/", $this->container['mobile_phone'])) {
            $invalidProperties[] = "invalid value for 'mobile_phone', must be conform to the pattern /^[\\d\\-]*$/.";
        }

        if (!is_null($this->container['work_phone']) && (mb_strlen($this->container['work_phone']) > 19)) {
            $invalidProperties[] = "invalid value for 'work_phone', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['work_phone']) && (mb_strlen($this->container['work_phone']) < 1)) {
            $invalidProperties[] = "invalid value for 'work_phone', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['work_phone']) && !preg_match("/^[\\d\\-]*$/", $this->container['work_phone'])) {
            $invalidProperties[] = "invalid value for 'work_phone', must be conform to the pattern /^[\\d\\-]*$/.";
        }

        if (!is_null($this->container['home_phone']) && (mb_strlen($this->container['home_phone']) > 19)) {
            $invalidProperties[] = "invalid value for 'home_phone', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['home_phone']) && (mb_strlen($this->container['home_phone']) < 1)) {
            $invalidProperties[] = "invalid value for 'home_phone', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['home_phone']) && !preg_match("/^[\\d\\-]*$/", $this->container['home_phone'])) {
            $invalidProperties[] = "invalid value for 'home_phone', must be conform to the pattern /^[\\d\\-]*$/.";
        }

        if (!is_null($this->container['mri_delivery_email_address']) && (mb_strlen($this->container['mri_delivery_email_address']) > 254)) {
            $invalidProperties[] = "invalid value for 'mri_delivery_email_address', the character length must be smaller than or equal to 254.";
        }

        if (!is_null($this->container['mri_delivery_email_address']) && (mb_strlen($this->container['mri_delivery_email_address']) < 1)) {
            $invalidProperties[] = "invalid value for 'mri_delivery_email_address', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mri_delivery_email_address']) && !preg_match("/^[ -~]*$/", $this->container['mri_delivery_email_address'])) {
            $invalidProperties[] = "invalid value for 'mri_delivery_email_address', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['mri_delivery_timeframe']) && (mb_strlen($this->container['mri_delivery_timeframe']) > 2)) {
            $invalidProperties[] = "invalid value for 'mri_delivery_timeframe', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['mri_delivery_timeframe']) && (mb_strlen($this->container['mri_delivery_timeframe']) < 1)) {
            $invalidProperties[] = "invalid value for 'mri_delivery_timeframe', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mri_delivery_timeframe']) && !preg_match("/^\\d+$/", $this->container['mri_delivery_timeframe'])) {
            $invalidProperties[] = "invalid value for 'mri_delivery_timeframe', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['mri_gift_card_amount']) && (mb_strlen($this->container['mri_gift_card_amount']) > 2)) {
            $invalidProperties[] = "invalid value for 'mri_gift_card_amount', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['mri_gift_card_amount']) && (mb_strlen($this->container['mri_gift_card_amount']) < 1)) {
            $invalidProperties[] = "invalid value for 'mri_gift_card_amount', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mri_gift_card_amount']) && !preg_match("/^\\d+$/", $this->container['mri_gift_card_amount'])) {
            $invalidProperties[] = "invalid value for 'mri_gift_card_amount', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['mri_gift_card_count']) && (mb_strlen($this->container['mri_gift_card_count']) > 2)) {
            $invalidProperties[] = "invalid value for 'mri_gift_card_count', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['mri_gift_card_count']) && (mb_strlen($this->container['mri_gift_card_count']) < 1)) {
            $invalidProperties[] = "invalid value for 'mri_gift_card_count', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mri_gift_card_count']) && !preg_match("/^\\d+$/", $this->container['mri_gift_card_count'])) {
            $invalidProperties[] = "invalid value for 'mri_gift_card_count', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['mri_gift_card_curr']) && (mb_strlen($this->container['mri_gift_card_curr']) > 3)) {
            $invalidProperties[] = "invalid value for 'mri_gift_card_curr', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['mri_gift_card_curr']) && (mb_strlen($this->container['mri_gift_card_curr']) < 1)) {
            $invalidProperties[] = "invalid value for 'mri_gift_card_curr', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mri_gift_card_curr']) && !preg_match("/^\\d+$/", $this->container['mri_gift_card_curr'])) {
            $invalidProperties[] = "invalid value for 'mri_gift_card_curr', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['mri_pre_order_date']) && (mb_strlen($this->container['mri_pre_order_date']) > 8)) {
            $invalidProperties[] = "invalid value for 'mri_pre_order_date', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['mri_pre_order_date']) && (mb_strlen($this->container['mri_pre_order_date']) < 8)) {
            $invalidProperties[] = "invalid value for 'mri_pre_order_date', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['mri_pre_order_date']) && !preg_match("/^\\d+$/", $this->container['mri_pre_order_date'])) {
            $invalidProperties[] = "invalid value for 'mri_pre_order_date', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['mri_pre_order_purchase_ind']) && (mb_strlen($this->container['mri_pre_order_purchase_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'mri_pre_order_purchase_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['mri_pre_order_purchase_ind']) && (mb_strlen($this->container['mri_pre_order_purchase_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'mri_pre_order_purchase_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['mri_pre_order_purchase_ind']) && !preg_match("/^\\d+$/", $this->container['mri_pre_order_purchase_ind'])) {
            $invalidProperties[] = "invalid value for 'mri_pre_order_purchase_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['mri_reorder_items_ind']) && (mb_strlen($this->container['mri_reorder_items_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'mri_reorder_items_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['mri_reorder_items_ind']) && (mb_strlen($this->container['mri_reorder_items_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'mri_reorder_items_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['mri_reorder_items_ind']) && !preg_match("/^\\d+$/", $this->container['mri_reorder_items_ind'])) {
            $invalidProperties[] = "invalid value for 'mri_reorder_items_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['mri_ship_indicator']) && (mb_strlen($this->container['mri_ship_indicator']) > 2)) {
            $invalidProperties[] = "invalid value for 'mri_ship_indicator', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['mri_ship_indicator']) && (mb_strlen($this->container['mri_ship_indicator']) < 2)) {
            $invalidProperties[] = "invalid value for 'mri_ship_indicator', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['mri_ship_indicator']) && !preg_match("/^\\d+$/", $this->container['mri_ship_indicator'])) {
            $invalidProperties[] = "invalid value for 'mri_ship_indicator', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['three_ds_req_prior_auth_data']) && (mb_strlen($this->container['three_ds_req_prior_auth_data']) > 2048)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_auth_data', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['three_ds_req_prior_auth_data']) && (mb_strlen($this->container['three_ds_req_prior_auth_data']) < 1)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_auth_data', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['three_ds_req_prior_auth_data']) && !preg_match("/^[ -~]*$/", $this->container['three_ds_req_prior_auth_data'])) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_auth_data', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['three_ds_req_prior_auth_method']) && (mb_strlen($this->container['three_ds_req_prior_auth_method']) > 2)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_auth_method', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['three_ds_req_prior_auth_method']) && (mb_strlen($this->container['three_ds_req_prior_auth_method']) < 2)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_auth_method', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['three_ds_req_prior_auth_method']) && !preg_match("/^\\d+$/", $this->container['three_ds_req_prior_auth_method'])) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_auth_method', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['three_ds_req_prior_auth_timestamp']) && (mb_strlen($this->container['three_ds_req_prior_auth_timestamp']) > 12)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_auth_timestamp', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['three_ds_req_prior_auth_timestamp']) && (mb_strlen($this->container['three_ds_req_prior_auth_timestamp']) < 12)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_auth_timestamp', the character length must be bigger than or equal to 12.";
        }

        if (!is_null($this->container['three_ds_req_prior_auth_timestamp']) && !preg_match("/^\\d+$/", $this->container['three_ds_req_prior_auth_timestamp'])) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_auth_timestamp', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['three_ds_req_prior_ref']) && (mb_strlen($this->container['three_ds_req_prior_ref']) > 36)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_ref', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['three_ds_req_prior_ref']) && (mb_strlen($this->container['three_ds_req_prior_ref']) < 36)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_ref', the character length must be bigger than or equal to 36.";
        }

        if (!is_null($this->container['three_ds_req_prior_ref']) && !preg_match("/^[ -~]*$/", $this->container['three_ds_req_prior_ref'])) {
            $invalidProperties[] = "invalid value for 'three_ds_req_prior_ref', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['acct_id']) && (mb_strlen($this->container['acct_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'acct_id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['acct_id']) && (mb_strlen($this->container['acct_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'acct_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['acct_id']) && !preg_match("/^[ -~]*$/", $this->container['acct_id'])) {
            $invalidProperties[] = "invalid value for 'acct_id', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['ch_acc_age_ind']) && (mb_strlen($this->container['ch_acc_age_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_age_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_age_ind']) && (mb_strlen($this->container['ch_acc_age_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_age_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_age_ind']) && !preg_match("/^\\d+$/", $this->container['ch_acc_age_ind'])) {
            $invalidProperties[] = "invalid value for 'ch_acc_age_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ch_acc_change']) && (mb_strlen($this->container['ch_acc_change']) > 8)) {
            $invalidProperties[] = "invalid value for 'ch_acc_change', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['ch_acc_change']) && (mb_strlen($this->container['ch_acc_change']) < 8)) {
            $invalidProperties[] = "invalid value for 'ch_acc_change', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['ch_acc_change']) && !preg_match("/^\\d+$/", $this->container['ch_acc_change'])) {
            $invalidProperties[] = "invalid value for 'ch_acc_change', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ch_acc_change_ind']) && (mb_strlen($this->container['ch_acc_change_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_change_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_change_ind']) && (mb_strlen($this->container['ch_acc_change_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_change_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_change_ind']) && !preg_match("/^\\d+$/", $this->container['ch_acc_change_ind'])) {
            $invalidProperties[] = "invalid value for 'ch_acc_change_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ch_acc_date']) && (mb_strlen($this->container['ch_acc_date']) > 8)) {
            $invalidProperties[] = "invalid value for 'ch_acc_date', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['ch_acc_date']) && (mb_strlen($this->container['ch_acc_date']) < 8)) {
            $invalidProperties[] = "invalid value for 'ch_acc_date', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['ch_acc_date']) && !preg_match("/^\\d+$/", $this->container['ch_acc_date'])) {
            $invalidProperties[] = "invalid value for 'ch_acc_date', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ch_acc_pw_change']) && (mb_strlen($this->container['ch_acc_pw_change']) > 8)) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['ch_acc_pw_change']) && (mb_strlen($this->container['ch_acc_pw_change']) < 8)) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['ch_acc_pw_change']) && !preg_match("/^\\d+$/", $this->container['ch_acc_pw_change'])) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ch_acc_pw_change_ind']) && (mb_strlen($this->container['ch_acc_pw_change_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_pw_change_ind']) && (mb_strlen($this->container['ch_acc_pw_change_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['ch_acc_pw_change_ind']) && !preg_match("/^\\d+$/", $this->container['ch_acc_pw_change_ind'])) {
            $invalidProperties[] = "invalid value for 'ch_acc_pw_change_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['nb_purchase_account']) && (mb_strlen($this->container['nb_purchase_account']) > 4)) {
            $invalidProperties[] = "invalid value for 'nb_purchase_account', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['nb_purchase_account']) && (mb_strlen($this->container['nb_purchase_account']) < 1)) {
            $invalidProperties[] = "invalid value for 'nb_purchase_account', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['nb_purchase_account']) && !preg_match("/^\\d+$/", $this->container['nb_purchase_account'])) {
            $invalidProperties[] = "invalid value for 'nb_purchase_account', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['provision_attempts_day']) && (mb_strlen($this->container['provision_attempts_day']) > 4)) {
            $invalidProperties[] = "invalid value for 'provision_attempts_day', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['provision_attempts_day']) && (mb_strlen($this->container['provision_attempts_day']) < 1)) {
            $invalidProperties[] = "invalid value for 'provision_attempts_day', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['provision_attempts_day']) && !preg_match("/^\\d+$/", $this->container['provision_attempts_day'])) {
            $invalidProperties[] = "invalid value for 'provision_attempts_day', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['txn_activity_day']) && (mb_strlen($this->container['txn_activity_day']) > 3)) {
            $invalidProperties[] = "invalid value for 'txn_activity_day', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['txn_activity_day']) && (mb_strlen($this->container['txn_activity_day']) < 1)) {
            $invalidProperties[] = "invalid value for 'txn_activity_day', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['txn_activity_day']) && !preg_match("/^\\d+$/", $this->container['txn_activity_day'])) {
            $invalidProperties[] = "invalid value for 'txn_activity_day', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['txn_activity_year']) && (mb_strlen($this->container['txn_activity_year']) > 3)) {
            $invalidProperties[] = "invalid value for 'txn_activity_year', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['txn_activity_year']) && (mb_strlen($this->container['txn_activity_year']) < 1)) {
            $invalidProperties[] = "invalid value for 'txn_activity_year', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['txn_activity_year']) && !preg_match("/^\\d+$/", $this->container['txn_activity_year'])) {
            $invalidProperties[] = "invalid value for 'txn_activity_year', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['payment_acc_age']) && (mb_strlen($this->container['payment_acc_age']) > 8)) {
            $invalidProperties[] = "invalid value for 'payment_acc_age', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['payment_acc_age']) && (mb_strlen($this->container['payment_acc_age']) < 8)) {
            $invalidProperties[] = "invalid value for 'payment_acc_age', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['payment_acc_age']) && !preg_match("/^\\d+$/", $this->container['payment_acc_age'])) {
            $invalidProperties[] = "invalid value for 'payment_acc_age', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['payment_acc_ind']) && (mb_strlen($this->container['payment_acc_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'payment_acc_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['payment_acc_ind']) && (mb_strlen($this->container['payment_acc_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'payment_acc_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['payment_acc_ind']) && !preg_match("/^\\d+$/", $this->container['payment_acc_ind'])) {
            $invalidProperties[] = "invalid value for 'payment_acc_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ship_address_usage']) && (mb_strlen($this->container['ship_address_usage']) > 8)) {
            $invalidProperties[] = "invalid value for 'ship_address_usage', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['ship_address_usage']) && (mb_strlen($this->container['ship_address_usage']) < 8)) {
            $invalidProperties[] = "invalid value for 'ship_address_usage', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['ship_address_usage']) && !preg_match("/^\\d+$/", $this->container['ship_address_usage'])) {
            $invalidProperties[] = "invalid value for 'ship_address_usage', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ship_address_usage_ind']) && (mb_strlen($this->container['ship_address_usage_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'ship_address_usage_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ship_address_usage_ind']) && (mb_strlen($this->container['ship_address_usage_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'ship_address_usage_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['ship_address_usage_ind']) && !preg_match("/^\\d+$/", $this->container['ship_address_usage_ind'])) {
            $invalidProperties[] = "invalid value for 'ship_address_usage_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['ship_name_indicator']) && (mb_strlen($this->container['ship_name_indicator']) > 2)) {
            $invalidProperties[] = "invalid value for 'ship_name_indicator', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['ship_name_indicator']) && (mb_strlen($this->container['ship_name_indicator']) < 2)) {
            $invalidProperties[] = "invalid value for 'ship_name_indicator', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['ship_name_indicator']) && !preg_match("/^\\d+$/", $this->container['ship_name_indicator'])) {
            $invalidProperties[] = "invalid value for 'ship_name_indicator', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['suspicious_acc_activity']) && (mb_strlen($this->container['suspicious_acc_activity']) > 2)) {
            $invalidProperties[] = "invalid value for 'suspicious_acc_activity', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['suspicious_acc_activity']) && (mb_strlen($this->container['suspicious_acc_activity']) < 2)) {
            $invalidProperties[] = "invalid value for 'suspicious_acc_activity', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['suspicious_acc_activity']) && !preg_match("/^\\d+$/", $this->container['suspicious_acc_activity'])) {
            $invalidProperties[] = "invalid value for 'suspicious_acc_activity', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['three_ds_req_auth_data']) && (mb_strlen($this->container['three_ds_req_auth_data']) > 20000)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_data', the character length must be smaller than or equal to 20000.";
        }

        if (!is_null($this->container['three_ds_req_auth_data']) && (mb_strlen($this->container['three_ds_req_auth_data']) < 2)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_data', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['three_ds_req_auth_data']) && !preg_match("/^[ -~]*$/", $this->container['three_ds_req_auth_data'])) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_data', must be conform to the pattern /^[ -~]*$/.";
        }

        if (!is_null($this->container['three_ds_req_auth_method']) && (mb_strlen($this->container['three_ds_req_auth_method']) > 2)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_method', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['three_ds_req_auth_method']) && (mb_strlen($this->container['three_ds_req_auth_method']) < 2)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_method', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['three_ds_req_auth_method']) && !preg_match("/^\\d+$/", $this->container['three_ds_req_auth_method'])) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_method', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['three_ds_req_auth_timestamp']) && (mb_strlen($this->container['three_ds_req_auth_timestamp']) > 12)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_timestamp', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['three_ds_req_auth_timestamp']) && (mb_strlen($this->container['three_ds_req_auth_timestamp']) < 12)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_timestamp', the character length must be bigger than or equal to 12.";
        }

        if (!is_null($this->container['three_ds_req_auth_timestamp']) && !preg_match("/^\\d+$/", $this->container['three_ds_req_auth_timestamp'])) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_timestamp', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['acct_type']) && (mb_strlen($this->container['acct_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'acct_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['acct_type']) && (mb_strlen($this->container['acct_type']) < 2)) {
            $invalidProperties[] = "invalid value for 'acct_type', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['acct_type']) && !preg_match("/^\\d+$/", $this->container['acct_type'])) {
            $invalidProperties[] = "invalid value for 'acct_type', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['trans_type']) && (mb_strlen($this->container['trans_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'trans_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['trans_type']) && (mb_strlen($this->container['trans_type']) < 2)) {
            $invalidProperties[] = "invalid value for 'trans_type', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['trans_type']) && !preg_match("/^\\d+$/", $this->container['trans_type'])) {
            $invalidProperties[] = "invalid value for 'trans_type', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['addr_match']) && (mb_strlen($this->container['addr_match']) > 1)) {
            $invalidProperties[] = "invalid value for 'addr_match', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['addr_match']) && (mb_strlen($this->container['addr_match']) < 1)) {
            $invalidProperties[] = "invalid value for 'addr_match', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['addr_match']) && !preg_match("/^[A-Za-z]*$/", $this->container['addr_match'])) {
            $invalidProperties[] = "invalid value for 'addr_match', must be conform to the pattern /^[A-Za-z]*$/.";
        }

        if (!is_null($this->container['three_ds_requestor_challenge_ind']) && (mb_strlen($this->container['three_ds_requestor_challenge_ind']) > 2)) {
            $invalidProperties[] = "invalid value for 'three_ds_requestor_challenge_ind', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['three_ds_requestor_challenge_ind']) && (mb_strlen($this->container['three_ds_requestor_challenge_ind']) < 2)) {
            $invalidProperties[] = "invalid value for 'three_ds_requestor_challenge_ind', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['three_ds_requestor_challenge_ind']) && !preg_match("/^\\d+$/", $this->container['three_ds_requestor_challenge_ind'])) {
            $invalidProperties[] = "invalid value for 'three_ds_requestor_challenge_ind', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['purchase_instal_data']) && (mb_strlen($this->container['purchase_instal_data']) > 3)) {
            $invalidProperties[] = "invalid value for 'purchase_instal_data', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['purchase_instal_data']) && (mb_strlen($this->container['purchase_instal_data']) < 1)) {
            $invalidProperties[] = "invalid value for 'purchase_instal_data', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['purchase_instal_data']) && !preg_match("/^\\d+$/", $this->container['purchase_instal_data'])) {
            $invalidProperties[] = "invalid value for 'purchase_instal_data', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['recurring_expiry']) && (mb_strlen($this->container['recurring_expiry']) > 8)) {
            $invalidProperties[] = "invalid value for 'recurring_expiry', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['recurring_expiry']) && (mb_strlen($this->container['recurring_expiry']) < 8)) {
            $invalidProperties[] = "invalid value for 'recurring_expiry', the character length must be bigger than or equal to 8.";
        }

        if (!is_null($this->container['recurring_expiry']) && !preg_match("/^\\d+$/", $this->container['recurring_expiry'])) {
            $invalidProperties[] = "invalid value for 'recurring_expiry', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['recurring_frequency']) && (mb_strlen($this->container['recurring_frequency']) > 4)) {
            $invalidProperties[] = "invalid value for 'recurring_frequency', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['recurring_frequency']) && (mb_strlen($this->container['recurring_frequency']) < 1)) {
            $invalidProperties[] = "invalid value for 'recurring_frequency', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['recurring_frequency']) && !preg_match("/^\\d+$/", $this->container['recurring_frequency'])) {
            $invalidProperties[] = "invalid value for 'recurring_frequency', must be conform to the pattern /^\\d+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bill_addr_city
     *
     * @return string|null
     */
    public function getBillAddrCity(): ?string
    {
        return $this->container['bill_addr_city'];
    }

    /**
     * Sets bill_addr_city
     *
     * @param string|null $bill_addr_city Город доставки счета
     *
     * @return $this
     */
    public function setBillAddrCity(?string $bill_addr_city): static
    {
        if (is_null($bill_addr_city)) {
            throw new InvalidArgumentException('non-nullable bill_addr_city cannot be null');
        }
        if ((mb_strlen($bill_addr_city) > 50)) {
            throw new InvalidArgumentException('invalid length for $bill_addr_city when calling TdsAdditionalAttributes., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($bill_addr_city) < 1)) {
            throw new InvalidArgumentException('invalid length for $bill_addr_city when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($bill_addr_city)))) {
            throw new InvalidArgumentException("invalid value for \$bill_addr_city when calling TdsAdditionalAttributes., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['bill_addr_city'] = $bill_addr_city;

        return $this;
    }

    /**
     * Gets bill_addr_country
     *
     * @return string|null
     */
    public function getBillAddrCountry(): ?string
    {
        return $this->container['bill_addr_country'];
    }

    /**
     * Sets bill_addr_country
     *
     * @param string|null $bill_addr_country Цифровой код страны доставки счета согласно ISO 3166-1
     *
     * @return $this
     */
    public function setBillAddrCountry(?string $bill_addr_country): static
    {
        if (is_null($bill_addr_country)) {
            throw new InvalidArgumentException('non-nullable bill_addr_country cannot be null');
        }
        if ((mb_strlen($bill_addr_country) > 3)) {
            throw new InvalidArgumentException('invalid length for $bill_addr_country when calling TdsAdditionalAttributes., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($bill_addr_country) < 1)) {
            throw new InvalidArgumentException('invalid length for $bill_addr_country when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($bill_addr_country)))) {
            throw new InvalidArgumentException("invalid value for \$bill_addr_country when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['bill_addr_country'] = $bill_addr_country;

        return $this;
    }

    /**
     * Gets bill_addr_line1
     *
     * @return string|null
     */
    public function getBillAddrLine1(): ?string
    {
        return $this->container['bill_addr_line1'];
    }

    /**
     * Sets bill_addr_line1
     *
     * @param string|null $bill_addr_line1 Адрес доставки счета
     *
     * @return $this
     */
    public function setBillAddrLine1(?string $bill_addr_line1): static
    {
        if (is_null($bill_addr_line1)) {
            throw new InvalidArgumentException('non-nullable bill_addr_line1 cannot be null');
        }
        if ((mb_strlen($bill_addr_line1) > 50)) {
            throw new InvalidArgumentException('invalid length for $bill_addr_line1 when calling TdsAdditionalAttributes., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($bill_addr_line1) < 1)) {
            throw new InvalidArgumentException('invalid length for $bill_addr_line1 when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($bill_addr_line1)))) {
            throw new InvalidArgumentException("invalid value for \$bill_addr_line1 when calling TdsAdditionalAttributes., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['bill_addr_line1'] = $bill_addr_line1;

        return $this;
    }

    /**
     * Gets bill_addr_line2
     *
     * @return string|null
     */
    public function getBillAddrLine2(): ?string
    {
        return $this->container['bill_addr_line2'];
    }

    /**
     * Sets bill_addr_line2
     *
     * @param string|null $bill_addr_line2 Адрес доставки счета
     *
     * @return $this
     */
    public function setBillAddrLine2(?string $bill_addr_line2): static
    {
        if (is_null($bill_addr_line2)) {
            throw new InvalidArgumentException('non-nullable bill_addr_line2 cannot be null');
        }
        if ((mb_strlen($bill_addr_line2) > 50)) {
            throw new InvalidArgumentException('invalid length for $bill_addr_line2 when calling TdsAdditionalAttributes., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($bill_addr_line2) < 1)) {
            throw new InvalidArgumentException('invalid length for $bill_addr_line2 when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($bill_addr_line2)))) {
            throw new InvalidArgumentException("invalid value for \$bill_addr_line2 when calling TdsAdditionalAttributes., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['bill_addr_line2'] = $bill_addr_line2;

        return $this;
    }

    /**
     * Gets bill_addr_line3
     *
     * @return string|null
     */
    public function getBillAddrLine3(): ?string
    {
        return $this->container['bill_addr_line3'];
    }

    /**
     * Sets bill_addr_line3
     *
     * @param string|null $bill_addr_line3 Адрес доставки счета
     *
     * @return $this
     */
    public function setBillAddrLine3(?string $bill_addr_line3): static
    {
        if (is_null($bill_addr_line3)) {
            throw new InvalidArgumentException('non-nullable bill_addr_line3 cannot be null');
        }
        if ((mb_strlen($bill_addr_line3) > 50)) {
            throw new InvalidArgumentException('invalid length for $bill_addr_line3 when calling TdsAdditionalAttributes., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($bill_addr_line3) < 1)) {
            throw new InvalidArgumentException('invalid length for $bill_addr_line3 when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($bill_addr_line3)))) {
            throw new InvalidArgumentException("invalid value for \$bill_addr_line3 when calling TdsAdditionalAttributes., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['bill_addr_line3'] = $bill_addr_line3;

        return $this;
    }

    /**
     * Gets bill_addr_post_code
     *
     * @return string|null
     */
    public function getBillAddrPostCode(): ?string
    {
        return $this->container['bill_addr_post_code'];
    }

    /**
     * Sets bill_addr_post_code
     *
     * @param string|null $bill_addr_post_code Почтовый индекс адреса доставки счета
     *
     * @return $this
     */
    public function setBillAddrPostCode(?string $bill_addr_post_code): static
    {
        if (is_null($bill_addr_post_code)) {
            throw new InvalidArgumentException('non-nullable bill_addr_post_code cannot be null');
        }
        if ((mb_strlen($bill_addr_post_code) > 16)) {
            throw new InvalidArgumentException('invalid length for $bill_addr_post_code when calling TdsAdditionalAttributes., must be smaller than or equal to 16.');
        }
        if ((mb_strlen($bill_addr_post_code) < 1)) {
            throw new InvalidArgumentException('invalid length for $bill_addr_post_code when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($bill_addr_post_code)))) {
            throw new InvalidArgumentException("invalid value for \$bill_addr_post_code when calling TdsAdditionalAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['bill_addr_post_code'] = $bill_addr_post_code;

        return $this;
    }

    /**
     * Gets bill_addr_state
     *
     * @return string|null
     */
    public function getBillAddrState(): ?string
    {
        return $this->container['bill_addr_state'];
    }

    /**
     * Sets bill_addr_state
     *
     * @param string|null $bill_addr_state Штат или провинция адреса доставки счета согласно ISO 3166-2
     *
     * @return $this
     */
    public function setBillAddrState(?string $bill_addr_state): static
    {
        if (is_null($bill_addr_state)) {
            throw new InvalidArgumentException('non-nullable bill_addr_state cannot be null');
        }
        if ((mb_strlen($bill_addr_state) > 3)) {
            throw new InvalidArgumentException('invalid length for $bill_addr_state when calling TdsAdditionalAttributes., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($bill_addr_state) < 1)) {
            throw new InvalidArgumentException('invalid length for $bill_addr_state when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($bill_addr_state)))) {
            throw new InvalidArgumentException("invalid value for \$bill_addr_state when calling TdsAdditionalAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['bill_addr_state'] = $bill_addr_state;

        return $this;
    }

    /**
     * Gets ship_addr_city
     *
     * @return string|null
     */
    public function getShipAddrCity(): ?string
    {
        return $this->container['ship_addr_city'];
    }

    /**
     * Sets ship_addr_city
     *
     * @param string|null $ship_addr_city Город доставки товара
     *
     * @return $this
     */
    public function setShipAddrCity(?string $ship_addr_city): static
    {
        if (is_null($ship_addr_city)) {
            throw new InvalidArgumentException('non-nullable ship_addr_city cannot be null');
        }
        if ((mb_strlen($ship_addr_city) > 50)) {
            throw new InvalidArgumentException('invalid length for $ship_addr_city when calling TdsAdditionalAttributes., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($ship_addr_city) < 1)) {
            throw new InvalidArgumentException('invalid length for $ship_addr_city when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($ship_addr_city)))) {
            throw new InvalidArgumentException("invalid value for \$ship_addr_city when calling TdsAdditionalAttributes., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['ship_addr_city'] = $ship_addr_city;

        return $this;
    }

    /**
     * Gets ship_addr_country
     *
     * @return string|null
     */
    public function getShipAddrCountry(): ?string
    {
        return $this->container['ship_addr_country'];
    }

    /**
     * Sets ship_addr_country
     *
     * @param string|null $ship_addr_country Цифровой код страны доставки товара согласно ISO 3166-1
     *
     * @return $this
     */
    public function setShipAddrCountry(?string $ship_addr_country): static
    {
        if (is_null($ship_addr_country)) {
            throw new InvalidArgumentException('non-nullable ship_addr_country cannot be null');
        }
        if ((mb_strlen($ship_addr_country) > 3)) {
            throw new InvalidArgumentException('invalid length for $ship_addr_country when calling TdsAdditionalAttributes., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($ship_addr_country) < 1)) {
            throw new InvalidArgumentException('invalid length for $ship_addr_country when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ship_addr_country)))) {
            throw new InvalidArgumentException("invalid value for \$ship_addr_country when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ship_addr_country'] = $ship_addr_country;

        return $this;
    }

    /**
     * Gets ship_addr_line1
     *
     * @return string|null
     */
    public function getShipAddrLine1(): ?string
    {
        return $this->container['ship_addr_line1'];
    }

    /**
     * Sets ship_addr_line1
     *
     * @param string|null $ship_addr_line1 Адрес доставки товара
     *
     * @return $this
     */
    public function setShipAddrLine1(?string $ship_addr_line1): static
    {
        if (is_null($ship_addr_line1)) {
            throw new InvalidArgumentException('non-nullable ship_addr_line1 cannot be null');
        }
        if ((mb_strlen($ship_addr_line1) > 50)) {
            throw new InvalidArgumentException('invalid length for $ship_addr_line1 when calling TdsAdditionalAttributes., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($ship_addr_line1) < 1)) {
            throw new InvalidArgumentException('invalid length for $ship_addr_line1 when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($ship_addr_line1)))) {
            throw new InvalidArgumentException("invalid value for \$ship_addr_line1 when calling TdsAdditionalAttributes., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['ship_addr_line1'] = $ship_addr_line1;

        return $this;
    }

    /**
     * Gets ship_addr_line2
     *
     * @return string|null
     */
    public function getShipAddrLine2(): ?string
    {
        return $this->container['ship_addr_line2'];
    }

    /**
     * Sets ship_addr_line2
     *
     * @param string|null $ship_addr_line2 Адрес доставки товара
     *
     * @return $this
     */
    public function setShipAddrLine2(?string $ship_addr_line2): static
    {
        if (is_null($ship_addr_line2)) {
            throw new InvalidArgumentException('non-nullable ship_addr_line2 cannot be null');
        }
        if ((mb_strlen($ship_addr_line2) > 50)) {
            throw new InvalidArgumentException('invalid length for $ship_addr_line2 when calling TdsAdditionalAttributes., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($ship_addr_line2) < 1)) {
            throw new InvalidArgumentException('invalid length for $ship_addr_line2 when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($ship_addr_line2)))) {
            throw new InvalidArgumentException("invalid value for \$ship_addr_line2 when calling TdsAdditionalAttributes., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['ship_addr_line2'] = $ship_addr_line2;

        return $this;
    }

    /**
     * Gets ship_addr_line3
     *
     * @return string|null
     */
    public function getShipAddrLine3(): ?string
    {
        return $this->container['ship_addr_line3'];
    }

    /**
     * Sets ship_addr_line3
     *
     * @param string|null $ship_addr_line3 Адрес доставки товара
     *
     * @return $this
     */
    public function setShipAddrLine3(?string $ship_addr_line3): static
    {
        if (is_null($ship_addr_line3)) {
            throw new InvalidArgumentException('non-nullable ship_addr_line3 cannot be null');
        }
        if ((mb_strlen($ship_addr_line3) > 50)) {
            throw new InvalidArgumentException('invalid length for $ship_addr_line3 when calling TdsAdditionalAttributes., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($ship_addr_line3) < 1)) {
            throw new InvalidArgumentException('invalid length for $ship_addr_line3 when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($ship_addr_line3)))) {
            throw new InvalidArgumentException("invalid value for \$ship_addr_line3 when calling TdsAdditionalAttributes., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['ship_addr_line3'] = $ship_addr_line3;

        return $this;
    }

    /**
     * Gets ship_addr_post_code
     *
     * @return string|null
     */
    public function getShipAddrPostCode(): ?string
    {
        return $this->container['ship_addr_post_code'];
    }

    /**
     * Sets ship_addr_post_code
     *
     * @param string|null $ship_addr_post_code Почтовый индекс адреса доставки товара
     *
     * @return $this
     */
    public function setShipAddrPostCode(?string $ship_addr_post_code): static
    {
        if (is_null($ship_addr_post_code)) {
            throw new InvalidArgumentException('non-nullable ship_addr_post_code cannot be null');
        }
        if ((mb_strlen($ship_addr_post_code) > 16)) {
            throw new InvalidArgumentException('invalid length for $ship_addr_post_code when calling TdsAdditionalAttributes., must be smaller than or equal to 16.');
        }
        if ((mb_strlen($ship_addr_post_code) < 1)) {
            throw new InvalidArgumentException('invalid length for $ship_addr_post_code when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($ship_addr_post_code)))) {
            throw new InvalidArgumentException("invalid value for \$ship_addr_post_code when calling TdsAdditionalAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['ship_addr_post_code'] = $ship_addr_post_code;

        return $this;
    }

    /**
     * Gets ship_addr_state
     *
     * @return string|null
     */
    public function getShipAddrState(): ?string
    {
        return $this->container['ship_addr_state'];
    }

    /**
     * Sets ship_addr_state
     *
     * @param string|null $ship_addr_state Штат или провинция адреса доставки товара согласно ISO 3166-2
     *
     * @return $this
     */
    public function setShipAddrState(?string $ship_addr_state): static
    {
        if (is_null($ship_addr_state)) {
            throw new InvalidArgumentException('non-nullable ship_addr_state cannot be null');
        }
        if ((mb_strlen($ship_addr_state) > 3)) {
            throw new InvalidArgumentException('invalid length for $ship_addr_state when calling TdsAdditionalAttributes., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($ship_addr_state) < 1)) {
            throw new InvalidArgumentException('invalid length for $ship_addr_state when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($ship_addr_state)))) {
            throw new InvalidArgumentException("invalid value for \$ship_addr_state when calling TdsAdditionalAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['ship_addr_state'] = $ship_addr_state;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string|null
     */
    public function getMobilePhone(): ?string
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string|null $mobile_phone Мобильный телефон в формате \"код страны\"-\"номер телефона\" (например, 7-4951234567) согласно ITU-E.164
     *
     * @return $this
     */
    public function setMobilePhone(?string $mobile_phone): static
    {
        if (is_null($mobile_phone)) {
            throw new InvalidArgumentException('non-nullable mobile_phone cannot be null');
        }
        if ((mb_strlen($mobile_phone) > 19)) {
            throw new InvalidArgumentException('invalid length for $mobile_phone when calling TdsAdditionalAttributes., must be smaller than or equal to 19.');
        }
        if ((mb_strlen($mobile_phone) < 1)) {
            throw new InvalidArgumentException('invalid length for $mobile_phone when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[\\d\\-]*$/", ObjectSerializer::toString($mobile_phone)))) {
            throw new InvalidArgumentException("invalid value for \$mobile_phone when calling TdsAdditionalAttributes., must conform to the pattern /^[\\d\\-]*$/.");
        }

        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets work_phone
     *
     * @return string|null
     */
    public function getWorkPhone(): ?string
    {
        return $this->container['work_phone'];
    }

    /**
     * Sets work_phone
     *
     * @param string|null $work_phone Рабочий телефон в формате \"код страны\"-\"номер телефона\" (например, 7-4951234567) согласно ITU-E.164
     *
     * @return $this
     */
    public function setWorkPhone(?string $work_phone): static
    {
        if (is_null($work_phone)) {
            throw new InvalidArgumentException('non-nullable work_phone cannot be null');
        }
        if ((mb_strlen($work_phone) > 19)) {
            throw new InvalidArgumentException('invalid length for $work_phone when calling TdsAdditionalAttributes., must be smaller than or equal to 19.');
        }
        if ((mb_strlen($work_phone) < 1)) {
            throw new InvalidArgumentException('invalid length for $work_phone when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[\\d\\-]*$/", ObjectSerializer::toString($work_phone)))) {
            throw new InvalidArgumentException("invalid value for \$work_phone when calling TdsAdditionalAttributes., must conform to the pattern /^[\\d\\-]*$/.");
        }

        $this->container['work_phone'] = $work_phone;

        return $this;
    }

    /**
     * Gets home_phone
     *
     * @return string|null
     */
    public function getHomePhone(): ?string
    {
        return $this->container['home_phone'];
    }

    /**
     * Sets home_phone
     *
     * @param string|null $home_phone Домашний телефон в формате \"код страны\"-\"номер телефона\" (например, 7-4951234567) согласно ITU-E.164
     *
     * @return $this
     */
    public function setHomePhone(?string $home_phone): static
    {
        if (is_null($home_phone)) {
            throw new InvalidArgumentException('non-nullable home_phone cannot be null');
        }
        if ((mb_strlen($home_phone) > 19)) {
            throw new InvalidArgumentException('invalid length for $home_phone when calling TdsAdditionalAttributes., must be smaller than or equal to 19.');
        }
        if ((mb_strlen($home_phone) < 1)) {
            throw new InvalidArgumentException('invalid length for $home_phone when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[\\d\\-]*$/", ObjectSerializer::toString($home_phone)))) {
            throw new InvalidArgumentException("invalid value for \$home_phone when calling TdsAdditionalAttributes., must conform to the pattern /^[\\d\\-]*$/.");
        }

        $this->container['home_phone'] = $home_phone;

        return $this;
    }

    /**
     * Gets mri_delivery_email_address
     *
     * @return string|null
     */
    public function getMriDeliveryEmailAddress(): ?string
    {
        return $this->container['mri_delivery_email_address'];
    }

    /**
     * Sets mri_delivery_email_address
     *
     * @param string|null $mri_delivery_email_address Для электронной доставки, электронный адрес доставки товара
     *
     * @return $this
     */
    public function setMriDeliveryEmailAddress(?string $mri_delivery_email_address): static
    {
        if (is_null($mri_delivery_email_address)) {
            throw new InvalidArgumentException('non-nullable mri_delivery_email_address cannot be null');
        }
        if ((mb_strlen($mri_delivery_email_address) > 254)) {
            throw new InvalidArgumentException('invalid length for $mri_delivery_email_address when calling TdsAdditionalAttributes., must be smaller than or equal to 254.');
        }
        if ((mb_strlen($mri_delivery_email_address) < 1)) {
            throw new InvalidArgumentException('invalid length for $mri_delivery_email_address when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($mri_delivery_email_address)))) {
            throw new InvalidArgumentException("invalid value for \$mri_delivery_email_address when calling TdsAdditionalAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['mri_delivery_email_address'] = $mri_delivery_email_address;

        return $this;
    }

    /**
     * Gets mri_delivery_timeframe
     *
     * @return string|null
     */
    public function getMriDeliveryTimeframe(): ?string
    {
        return $this->container['mri_delivery_timeframe'];
    }

    /**
     * Sets mri_delivery_timeframe
     *
     * @param string|null $mri_delivery_timeframe Срок доставки товара: * `01` = Electronic Delivery; * `02` = Same day shipping; * `03` = Overnight shipping; * `04` = Two-day or more shipping.
     *
     * @return $this
     */
    public function setMriDeliveryTimeframe(?string $mri_delivery_timeframe): static
    {
        if (is_null($mri_delivery_timeframe)) {
            throw new InvalidArgumentException('non-nullable mri_delivery_timeframe cannot be null');
        }
        if ((mb_strlen($mri_delivery_timeframe) > 2)) {
            throw new InvalidArgumentException('invalid length for $mri_delivery_timeframe when calling TdsAdditionalAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($mri_delivery_timeframe) < 1)) {
            throw new InvalidArgumentException('invalid length for $mri_delivery_timeframe when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mri_delivery_timeframe)))) {
            throw new InvalidArgumentException("invalid value for \$mri_delivery_timeframe when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mri_delivery_timeframe'] = $mri_delivery_timeframe;

        return $this;
    }

    /**
     * Gets mri_gift_card_amount
     *
     * @return string|null
     */
    public function getMriGiftCardAmount(): ?string
    {
        return $this->container['mri_gift_card_amount'];
    }

    /**
     * Sets mri_gift_card_amount
     *
     * @param string|null $mri_gift_card_amount При покупке предоплаченной или подарочной карты, общий номинал карт в мажорных единицах валюты
     *
     * @return $this
     */
    public function setMriGiftCardAmount(?string $mri_gift_card_amount): static
    {
        if (is_null($mri_gift_card_amount)) {
            throw new InvalidArgumentException('non-nullable mri_gift_card_amount cannot be null');
        }
        if ((mb_strlen($mri_gift_card_amount) > 2)) {
            throw new InvalidArgumentException('invalid length for $mri_gift_card_amount when calling TdsAdditionalAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($mri_gift_card_amount) < 1)) {
            throw new InvalidArgumentException('invalid length for $mri_gift_card_amount when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mri_gift_card_amount)))) {
            throw new InvalidArgumentException("invalid value for \$mri_gift_card_amount when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mri_gift_card_amount'] = $mri_gift_card_amount;

        return $this;
    }

    /**
     * Gets mri_gift_card_count
     *
     * @return string|null
     */
    public function getMriGiftCardCount(): ?string
    {
        return $this->container['mri_gift_card_count'];
    }

    /**
     * Sets mri_gift_card_count
     *
     * @param string|null $mri_gift_card_count При покупке предоплаченной или подарочной карты, общее количество карт
     *
     * @return $this
     */
    public function setMriGiftCardCount(?string $mri_gift_card_count): static
    {
        if (is_null($mri_gift_card_count)) {
            throw new InvalidArgumentException('non-nullable mri_gift_card_count cannot be null');
        }
        if ((mb_strlen($mri_gift_card_count) > 2)) {
            throw new InvalidArgumentException('invalid length for $mri_gift_card_count when calling TdsAdditionalAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($mri_gift_card_count) < 1)) {
            throw new InvalidArgumentException('invalid length for $mri_gift_card_count when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mri_gift_card_count)))) {
            throw new InvalidArgumentException("invalid value for \$mri_gift_card_count when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mri_gift_card_count'] = $mri_gift_card_count;

        return $this;
    }

    /**
     * Gets mri_gift_card_curr
     *
     * @return string|null
     */
    public function getMriGiftCardCurr(): ?string
    {
        return $this->container['mri_gift_card_curr'];
    }

    /**
     * Sets mri_gift_card_curr
     *
     * @param string|null $mri_gift_card_curr При покупке предоплаченной или подарочной карты, цифровой код валюты карты согласно ISO-4217
     *
     * @return $this
     */
    public function setMriGiftCardCurr(?string $mri_gift_card_curr): static
    {
        if (is_null($mri_gift_card_curr)) {
            throw new InvalidArgumentException('non-nullable mri_gift_card_curr cannot be null');
        }
        if ((mb_strlen($mri_gift_card_curr) > 3)) {
            throw new InvalidArgumentException('invalid length for $mri_gift_card_curr when calling TdsAdditionalAttributes., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($mri_gift_card_curr) < 1)) {
            throw new InvalidArgumentException('invalid length for $mri_gift_card_curr when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mri_gift_card_curr)))) {
            throw new InvalidArgumentException("invalid value for \$mri_gift_card_curr when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mri_gift_card_curr'] = $mri_gift_card_curr;

        return $this;
    }

    /**
     * Gets mri_pre_order_date
     *
     * @return string|null
     */
    public function getMriPreOrderDate(): ?string
    {
        return $this->container['mri_pre_order_date'];
    }

    /**
     * Sets mri_pre_order_date
     *
     * @param string|null $mri_pre_order_date Дата поставки товара под заказ в формате YYYYMMDD для предварительного заказа
     *
     * @return $this
     */
    public function setMriPreOrderDate(?string $mri_pre_order_date): static
    {
        if (is_null($mri_pre_order_date)) {
            throw new InvalidArgumentException('non-nullable mri_pre_order_date cannot be null');
        }
        if ((mb_strlen($mri_pre_order_date) > 8)) {
            throw new InvalidArgumentException('invalid length for $mri_pre_order_date when calling TdsAdditionalAttributes., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($mri_pre_order_date) < 8)) {
            throw new InvalidArgumentException('invalid length for $mri_pre_order_date when calling TdsAdditionalAttributes., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mri_pre_order_date)))) {
            throw new InvalidArgumentException("invalid value for \$mri_pre_order_date when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mri_pre_order_date'] = $mri_pre_order_date;

        return $this;
    }

    /**
     * Gets mri_pre_order_purchase_ind
     *
     * @return string|null
     */
    public function getMriPreOrderPurchaseInd(): ?string
    {
        return $this->container['mri_pre_order_purchase_ind'];
    }

    /**
     * Sets mri_pre_order_purchase_ind
     *
     * @param string|null $mri_pre_order_purchase_ind Индикатор заказа товаров не в наличии (под заказ):   * `01` = Merchandise available;   * `02` = Future availability.
     *
     * @return $this
     */
    public function setMriPreOrderPurchaseInd(?string $mri_pre_order_purchase_ind): static
    {
        if (is_null($mri_pre_order_purchase_ind)) {
            throw new InvalidArgumentException('non-nullable mri_pre_order_purchase_ind cannot be null');
        }
        if ((mb_strlen($mri_pre_order_purchase_ind) > 2)) {
            throw new InvalidArgumentException('invalid length for $mri_pre_order_purchase_ind when calling TdsAdditionalAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($mri_pre_order_purchase_ind) < 2)) {
            throw new InvalidArgumentException('invalid length for $mri_pre_order_purchase_ind when calling TdsAdditionalAttributes., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mri_pre_order_purchase_ind)))) {
            throw new InvalidArgumentException("invalid value for \$mri_pre_order_purchase_ind when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mri_pre_order_purchase_ind'] = $mri_pre_order_purchase_ind;

        return $this;
    }

    /**
     * Gets mri_reorder_items_ind
     *
     * @return string|null
     */
    public function getMriReorderItemsInd(): ?string
    {
        return $this->container['mri_reorder_items_ind'];
    }

    /**
     * Sets mri_reorder_items_ind
     *
     * @param string|null $mri_reorder_items_ind Индикатор повторной покупки в ТСП:   * `01` = First time ordered;   * `02` = Reordered.
     *
     * @return $this
     */
    public function setMriReorderItemsInd(?string $mri_reorder_items_ind): static
    {
        if (is_null($mri_reorder_items_ind)) {
            throw new InvalidArgumentException('non-nullable mri_reorder_items_ind cannot be null');
        }
        if ((mb_strlen($mri_reorder_items_ind) > 2)) {
            throw new InvalidArgumentException('invalid length for $mri_reorder_items_ind when calling TdsAdditionalAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($mri_reorder_items_ind) < 2)) {
            throw new InvalidArgumentException('invalid length for $mri_reorder_items_ind when calling TdsAdditionalAttributes., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mri_reorder_items_ind)))) {
            throw new InvalidArgumentException("invalid value for \$mri_reorder_items_ind when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mri_reorder_items_ind'] = $mri_reorder_items_ind;

        return $this;
    }

    /**
     * Gets mri_ship_indicator
     *
     * @return string|null
     */
    public function getMriShipIndicator(): ?string
    {
        return $this->container['mri_ship_indicator'];
    }

    /**
     * Sets mri_ship_indicator
     *
     * @param string|null $mri_ship_indicator Способ доставки, выбранный для операции:   * `01` = Ship to cardholder's billing address;   * `02` = Ship to another verified address on file with merchant;   * `03` = Ship to address that is different than the cardholder's billing address;   * `04` = “Ship to Store” / Pick-up at local store (Store address shall be populated in shipping address fields);   * `05` = Digital goods (includes online services, electronic gift cards and redemption codes);   * `06` = Travel and Event tickets, not shipped;   * `07` = Other (for example, Gaming, digital services not shipped, emedia subscriptions, etc.).
     *
     * @return $this
     */
    public function setMriShipIndicator(?string $mri_ship_indicator): static
    {
        if (is_null($mri_ship_indicator)) {
            throw new InvalidArgumentException('non-nullable mri_ship_indicator cannot be null');
        }
        if ((mb_strlen($mri_ship_indicator) > 2)) {
            throw new InvalidArgumentException('invalid length for $mri_ship_indicator when calling TdsAdditionalAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($mri_ship_indicator) < 2)) {
            throw new InvalidArgumentException('invalid length for $mri_ship_indicator when calling TdsAdditionalAttributes., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mri_ship_indicator)))) {
            throw new InvalidArgumentException("invalid value for \$mri_ship_indicator when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mri_ship_indicator'] = $mri_ship_indicator;

        return $this;
    }

    /**
     * Gets three_ds_req_prior_auth_data
     *
     * @return string|null
     */
    public function getThreeDsReqPriorAuthData(): ?string
    {
        return $this->container['three_ds_req_prior_auth_data'];
    }

    /**
     * Sets three_ds_req_prior_auth_data
     *
     * @param string|null $three_ds_req_prior_auth_data Данные первой аутентификации в цепочке, которая произошла до текущей операции (например, первой аутентификации для recurring платежа)
     *
     * @return $this
     */
    public function setThreeDsReqPriorAuthData(?string $three_ds_req_prior_auth_data): static
    {
        if (is_null($three_ds_req_prior_auth_data)) {
            throw new InvalidArgumentException('non-nullable three_ds_req_prior_auth_data cannot be null');
        }
        if ((mb_strlen($three_ds_req_prior_auth_data) > 2048)) {
            throw new InvalidArgumentException('invalid length for $three_ds_req_prior_auth_data when calling TdsAdditionalAttributes., must be smaller than or equal to 2048.');
        }
        if ((mb_strlen($three_ds_req_prior_auth_data) < 1)) {
            throw new InvalidArgumentException('invalid length for $three_ds_req_prior_auth_data when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($three_ds_req_prior_auth_data)))) {
            throw new InvalidArgumentException("invalid value for \$three_ds_req_prior_auth_data when calling TdsAdditionalAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['three_ds_req_prior_auth_data'] = $three_ds_req_prior_auth_data;

        return $this;
    }

    /**
     * Gets three_ds_req_prior_auth_method
     *
     * @return string|null
     */
    public function getThreeDsReqPriorAuthMethod(): ?string
    {
        return $this->container['three_ds_req_prior_auth_method'];
    }

    /**
     * Sets three_ds_req_prior_auth_method
     *
     * @param string|null $three_ds_req_prior_auth_method Способ аутентификации Плательщика в первой операции в цепочке:   * `01` = Frictionless authentication occurred by ACS;   * `02` = Cardholder challenge occurred by ACS;   * `03` = AVS verified;   * `04` = Other issuer methods;   * `05`–`79` = Reserved for EMVCo future use (values invalid until defined by EMVCo);   * `80`–`99` = Reserved for DS use.
     *
     * @return $this
     */
    public function setThreeDsReqPriorAuthMethod(?string $three_ds_req_prior_auth_method): static
    {
        if (is_null($three_ds_req_prior_auth_method)) {
            throw new InvalidArgumentException('non-nullable three_ds_req_prior_auth_method cannot be null');
        }
        if ((mb_strlen($three_ds_req_prior_auth_method) > 2)) {
            throw new InvalidArgumentException('invalid length for $three_ds_req_prior_auth_method when calling TdsAdditionalAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($three_ds_req_prior_auth_method) < 2)) {
            throw new InvalidArgumentException('invalid length for $three_ds_req_prior_auth_method when calling TdsAdditionalAttributes., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($three_ds_req_prior_auth_method)))) {
            throw new InvalidArgumentException("invalid value for \$three_ds_req_prior_auth_method when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['three_ds_req_prior_auth_method'] = $three_ds_req_prior_auth_method;

        return $this;
    }

    /**
     * Gets three_ds_req_prior_auth_timestamp
     *
     * @return string|null
     */
    public function getThreeDsReqPriorAuthTimestamp(): ?string
    {
        return $this->container['three_ds_req_prior_auth_timestamp'];
    }

    /**
     * Sets three_ds_req_prior_auth_timestamp
     *
     * @param string|null $three_ds_req_prior_auth_timestamp Дата и время в UTC первой аутентификации в цепочке в формате YYYYMMDDHHMM
     *
     * @return $this
     */
    public function setThreeDsReqPriorAuthTimestamp(?string $three_ds_req_prior_auth_timestamp): static
    {
        if (is_null($three_ds_req_prior_auth_timestamp)) {
            throw new InvalidArgumentException('non-nullable three_ds_req_prior_auth_timestamp cannot be null');
        }
        if ((mb_strlen($three_ds_req_prior_auth_timestamp) > 12)) {
            throw new InvalidArgumentException('invalid length for $three_ds_req_prior_auth_timestamp when calling TdsAdditionalAttributes., must be smaller than or equal to 12.');
        }
        if ((mb_strlen($three_ds_req_prior_auth_timestamp) < 12)) {
            throw new InvalidArgumentException('invalid length for $three_ds_req_prior_auth_timestamp when calling TdsAdditionalAttributes., must be bigger than or equal to 12.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($three_ds_req_prior_auth_timestamp)))) {
            throw new InvalidArgumentException("invalid value for \$three_ds_req_prior_auth_timestamp when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['three_ds_req_prior_auth_timestamp'] = $three_ds_req_prior_auth_timestamp;

        return $this;
    }

    /**
     * Gets three_ds_req_prior_ref
     *
     * @return string|null
     */
    public function getThreeDsReqPriorRef(): ?string
    {
        return $this->container['three_ds_req_prior_ref'];
    }

    /**
     * Sets three_ds_req_prior_ref
     *
     * @param string|null $three_ds_req_prior_ref ACS Transaction ID первой аутентификации в цепочке запросов (например, первой аутентификации для recurring платежа)
     *
     * @return $this
     */
    public function setThreeDsReqPriorRef(?string $three_ds_req_prior_ref): static
    {
        if (is_null($three_ds_req_prior_ref)) {
            throw new InvalidArgumentException('non-nullable three_ds_req_prior_ref cannot be null');
        }
        if ((mb_strlen($three_ds_req_prior_ref) > 36)) {
            throw new InvalidArgumentException('invalid length for $three_ds_req_prior_ref when calling TdsAdditionalAttributes., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($three_ds_req_prior_ref) < 36)) {
            throw new InvalidArgumentException('invalid length for $three_ds_req_prior_ref when calling TdsAdditionalAttributes., must be bigger than or equal to 36.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($three_ds_req_prior_ref)))) {
            throw new InvalidArgumentException("invalid value for \$three_ds_req_prior_ref when calling TdsAdditionalAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['three_ds_req_prior_ref'] = $three_ds_req_prior_ref;

        return $this;
    }

    /**
     * Gets acct_id
     *
     * @return string|null
     */
    public function getAcctId(): ?string
    {
        return $this->container['acct_id'];
    }

    /**
     * Sets acct_id
     *
     * @param string|null $acct_id Идентификатор аккаунта Плательщика в ТСП
     *
     * @return $this
     */
    public function setAcctId(?string $acct_id): static
    {
        if (is_null($acct_id)) {
            throw new InvalidArgumentException('non-nullable acct_id cannot be null');
        }
        if ((mb_strlen($acct_id) > 64)) {
            throw new InvalidArgumentException('invalid length for $acct_id when calling TdsAdditionalAttributes., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($acct_id) < 1)) {
            throw new InvalidArgumentException('invalid length for $acct_id when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($acct_id)))) {
            throw new InvalidArgumentException("invalid value for \$acct_id when calling TdsAdditionalAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['acct_id'] = $acct_id;

        return $this;
    }

    /**
     * Gets ch_acc_age_ind
     *
     * @return string|null
     */
    public function getChAccAgeInd(): ?string
    {
        return $this->container['ch_acc_age_ind'];
    }

    /**
     * Sets ch_acc_age_ind
     *
     * @param string|null $ch_acc_age_ind Возраст аккаунта Плательщика в ТСП:   * `01` = No account (guest check-out);   * `02` = Created during this transaction;   * `03` = Less than 30 days;   * `04` = 30-60 days;   * `05` = More than 60 days.
     *
     * @return $this
     */
    public function setChAccAgeInd(?string $ch_acc_age_ind): static
    {
        if (is_null($ch_acc_age_ind)) {
            throw new InvalidArgumentException('non-nullable ch_acc_age_ind cannot be null');
        }
        if ((mb_strlen($ch_acc_age_ind) > 2)) {
            throw new InvalidArgumentException('invalid length for $ch_acc_age_ind when calling TdsAdditionalAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ch_acc_age_ind) < 2)) {
            throw new InvalidArgumentException('invalid length for $ch_acc_age_ind when calling TdsAdditionalAttributes., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ch_acc_age_ind)))) {
            throw new InvalidArgumentException("invalid value for \$ch_acc_age_ind when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ch_acc_age_ind'] = $ch_acc_age_ind;

        return $this;
    }

    /**
     * Gets ch_acc_change
     *
     * @return string|null
     */
    public function getChAccChange(): ?string
    {
        return $this->container['ch_acc_change'];
    }

    /**
     * Sets ch_acc_change
     *
     * @param string|null $ch_acc_change Дата последнего редактирования аккаунта Плательщика в ТСП в формате YYYYMMDD
     *
     * @return $this
     */
    public function setChAccChange(?string $ch_acc_change): static
    {
        if (is_null($ch_acc_change)) {
            throw new InvalidArgumentException('non-nullable ch_acc_change cannot be null');
        }
        if ((mb_strlen($ch_acc_change) > 8)) {
            throw new InvalidArgumentException('invalid length for $ch_acc_change when calling TdsAdditionalAttributes., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($ch_acc_change) < 8)) {
            throw new InvalidArgumentException('invalid length for $ch_acc_change when calling TdsAdditionalAttributes., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ch_acc_change)))) {
            throw new InvalidArgumentException("invalid value for \$ch_acc_change when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ch_acc_change'] = $ch_acc_change;

        return $this;
    }

    /**
     * Gets ch_acc_change_ind
     *
     * @return string|null
     */
    public function getChAccChangeInd(): ?string
    {
        return $this->container['ch_acc_change_ind'];
    }

    /**
     * Sets ch_acc_change_ind
     *
     * @param string|null $ch_acc_change_ind Период времени с последнего редактирования аккаунта Плательщика в ТСП:   * `01` = Changed during this transaction;   * `02` = Less than 30 days;   * `03` = 30-60 days;   * `04` = More than 60 days.
     *
     * @return $this
     */
    public function setChAccChangeInd(?string $ch_acc_change_ind): static
    {
        if (is_null($ch_acc_change_ind)) {
            throw new InvalidArgumentException('non-nullable ch_acc_change_ind cannot be null');
        }
        if ((mb_strlen($ch_acc_change_ind) > 2)) {
            throw new InvalidArgumentException('invalid length for $ch_acc_change_ind when calling TdsAdditionalAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ch_acc_change_ind) < 2)) {
            throw new InvalidArgumentException('invalid length for $ch_acc_change_ind when calling TdsAdditionalAttributes., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ch_acc_change_ind)))) {
            throw new InvalidArgumentException("invalid value for \$ch_acc_change_ind when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ch_acc_change_ind'] = $ch_acc_change_ind;

        return $this;
    }

    /**
     * Gets ch_acc_date
     *
     * @return string|null
     */
    public function getChAccDate(): ?string
    {
        return $this->container['ch_acc_date'];
    }

    /**
     * Sets ch_acc_date
     *
     * @param string|null $ch_acc_date Дата создания аккаунта Плательщика в ТСП в формате YYYYMMDD
     *
     * @return $this
     */
    public function setChAccDate(?string $ch_acc_date): static
    {
        if (is_null($ch_acc_date)) {
            throw new InvalidArgumentException('non-nullable ch_acc_date cannot be null');
        }
        if ((mb_strlen($ch_acc_date) > 8)) {
            throw new InvalidArgumentException('invalid length for $ch_acc_date when calling TdsAdditionalAttributes., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($ch_acc_date) < 8)) {
            throw new InvalidArgumentException('invalid length for $ch_acc_date when calling TdsAdditionalAttributes., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ch_acc_date)))) {
            throw new InvalidArgumentException("invalid value for \$ch_acc_date when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ch_acc_date'] = $ch_acc_date;

        return $this;
    }

    /**
     * Gets ch_acc_pw_change
     *
     * @return string|null
     */
    public function getChAccPwChange(): ?string
    {
        return $this->container['ch_acc_pw_change'];
    }

    /**
     * Sets ch_acc_pw_change
     *
     * @param string|null $ch_acc_pw_change Дата последнего изменения пароля или сброса аккаунта Плательщика в ТСП в формате YYYYMMDD
     *
     * @return $this
     */
    public function setChAccPwChange(?string $ch_acc_pw_change): static
    {
        if (is_null($ch_acc_pw_change)) {
            throw new InvalidArgumentException('non-nullable ch_acc_pw_change cannot be null');
        }
        if ((mb_strlen($ch_acc_pw_change) > 8)) {
            throw new InvalidArgumentException('invalid length for $ch_acc_pw_change when calling TdsAdditionalAttributes., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($ch_acc_pw_change) < 8)) {
            throw new InvalidArgumentException('invalid length for $ch_acc_pw_change when calling TdsAdditionalAttributes., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ch_acc_pw_change)))) {
            throw new InvalidArgumentException("invalid value for \$ch_acc_pw_change when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ch_acc_pw_change'] = $ch_acc_pw_change;

        return $this;
    }

    /**
     * Gets ch_acc_pw_change_ind
     *
     * @return string|null
     */
    public function getChAccPwChangeInd(): ?string
    {
        return $this->container['ch_acc_pw_change_ind'];
    }

    /**
     * Sets ch_acc_pw_change_ind
     *
     * @param string|null $ch_acc_pw_change_ind Период времени с последнего изменения пароля или сброса аккаунта Плательщика в ТСП:   * `01` = No change;   * `02` = Changed during this transaction;   * `03` = Less than 30 days;   * `04` = 30-60 days;   * `05` = More than 60 days.
     *
     * @return $this
     */
    public function setChAccPwChangeInd(?string $ch_acc_pw_change_ind): static
    {
        if (is_null($ch_acc_pw_change_ind)) {
            throw new InvalidArgumentException('non-nullable ch_acc_pw_change_ind cannot be null');
        }
        if ((mb_strlen($ch_acc_pw_change_ind) > 2)) {
            throw new InvalidArgumentException('invalid length for $ch_acc_pw_change_ind when calling TdsAdditionalAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ch_acc_pw_change_ind) < 2)) {
            throw new InvalidArgumentException('invalid length for $ch_acc_pw_change_ind when calling TdsAdditionalAttributes., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ch_acc_pw_change_ind)))) {
            throw new InvalidArgumentException("invalid value for \$ch_acc_pw_change_ind when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ch_acc_pw_change_ind'] = $ch_acc_pw_change_ind;

        return $this;
    }

    /**
     * Gets nb_purchase_account
     *
     * @return string|null
     */
    public function getNbPurchaseAccount(): ?string
    {
        return $this->container['nb_purchase_account'];
    }

    /**
     * Sets nb_purchase_account
     *
     * @param string|null $nb_purchase_account Количество покупок, совершенных с аккаунта Плательщика за последние 6 месяцев
     *
     * @return $this
     */
    public function setNbPurchaseAccount(?string $nb_purchase_account): static
    {
        if (is_null($nb_purchase_account)) {
            throw new InvalidArgumentException('non-nullable nb_purchase_account cannot be null');
        }
        if ((mb_strlen($nb_purchase_account) > 4)) {
            throw new InvalidArgumentException('invalid length for $nb_purchase_account when calling TdsAdditionalAttributes., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($nb_purchase_account) < 1)) {
            throw new InvalidArgumentException('invalid length for $nb_purchase_account when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($nb_purchase_account)))) {
            throw new InvalidArgumentException("invalid value for \$nb_purchase_account when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['nb_purchase_account'] = $nb_purchase_account;

        return $this;
    }

    /**
     * Gets provision_attempts_day
     *
     * @return string|null
     */
    public function getProvisionAttemptsDay(): ?string
    {
        return $this->container['provision_attempts_day'];
    }

    /**
     * Sets provision_attempts_day
     *
     * @param string|null $provision_attempts_day Количество попыток добавления карты за последние 24 часа
     *
     * @return $this
     */
    public function setProvisionAttemptsDay(?string $provision_attempts_day): static
    {
        if (is_null($provision_attempts_day)) {
            throw new InvalidArgumentException('non-nullable provision_attempts_day cannot be null');
        }
        if ((mb_strlen($provision_attempts_day) > 4)) {
            throw new InvalidArgumentException('invalid length for $provision_attempts_day when calling TdsAdditionalAttributes., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($provision_attempts_day) < 1)) {
            throw new InvalidArgumentException('invalid length for $provision_attempts_day when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($provision_attempts_day)))) {
            throw new InvalidArgumentException("invalid value for \$provision_attempts_day when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['provision_attempts_day'] = $provision_attempts_day;

        return $this;
    }

    /**
     * Gets txn_activity_day
     *
     * @return string|null
     */
    public function getTxnActivityDay(): ?string
    {
        return $this->container['txn_activity_day'];
    }

    /**
     * Sets txn_activity_day
     *
     * @param string|null $txn_activity_day Количество операций (успешных и незавершенных), совершенных с аккаунта Плательщика за последние 24 часа всеми платёжными средствами
     *
     * @return $this
     */
    public function setTxnActivityDay(?string $txn_activity_day): static
    {
        if (is_null($txn_activity_day)) {
            throw new InvalidArgumentException('non-nullable txn_activity_day cannot be null');
        }
        if ((mb_strlen($txn_activity_day) > 3)) {
            throw new InvalidArgumentException('invalid length for $txn_activity_day when calling TdsAdditionalAttributes., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($txn_activity_day) < 1)) {
            throw new InvalidArgumentException('invalid length for $txn_activity_day when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($txn_activity_day)))) {
            throw new InvalidArgumentException("invalid value for \$txn_activity_day when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['txn_activity_day'] = $txn_activity_day;

        return $this;
    }

    /**
     * Gets txn_activity_year
     *
     * @return string|null
     */
    public function getTxnActivityYear(): ?string
    {
        return $this->container['txn_activity_year'];
    }

    /**
     * Sets txn_activity_year
     *
     * @param string|null $txn_activity_year Количество операций (успешных и незавершенных), совершенных с аккаунта Плательщика за последний год всеми платёжными средствами
     *
     * @return $this
     */
    public function setTxnActivityYear(?string $txn_activity_year): static
    {
        if (is_null($txn_activity_year)) {
            throw new InvalidArgumentException('non-nullable txn_activity_year cannot be null');
        }
        if ((mb_strlen($txn_activity_year) > 3)) {
            throw new InvalidArgumentException('invalid length for $txn_activity_year when calling TdsAdditionalAttributes., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($txn_activity_year) < 1)) {
            throw new InvalidArgumentException('invalid length for $txn_activity_year when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($txn_activity_year)))) {
            throw new InvalidArgumentException("invalid value for \$txn_activity_year when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['txn_activity_year'] = $txn_activity_year;

        return $this;
    }

    /**
     * Gets payment_acc_age
     *
     * @return string|null
     */
    public function getPaymentAccAge(): ?string
    {
        return $this->container['payment_acc_age'];
    }

    /**
     * Sets payment_acc_age
     *
     * @param string|null $payment_acc_age Дата добавления платёжного метода в аккаунте Плательщика в формате YYYYMMDD
     *
     * @return $this
     */
    public function setPaymentAccAge(?string $payment_acc_age): static
    {
        if (is_null($payment_acc_age)) {
            throw new InvalidArgumentException('non-nullable payment_acc_age cannot be null');
        }
        if ((mb_strlen($payment_acc_age) > 8)) {
            throw new InvalidArgumentException('invalid length for $payment_acc_age when calling TdsAdditionalAttributes., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($payment_acc_age) < 8)) {
            throw new InvalidArgumentException('invalid length for $payment_acc_age when calling TdsAdditionalAttributes., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($payment_acc_age)))) {
            throw new InvalidArgumentException("invalid value for \$payment_acc_age when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['payment_acc_age'] = $payment_acc_age;

        return $this;
    }

    /**
     * Gets payment_acc_ind
     *
     * @return string|null
     */
    public function getPaymentAccInd(): ?string
    {
        return $this->container['payment_acc_ind'];
    }

    /**
     * Sets payment_acc_ind
     *
     * @param string|null $payment_acc_ind Период времени с момента добавления платёжного метода в аккаунт Плательщика:   * `01` = No account (guest check-out);   * `02` = During this transaction;   * `03` = Less than 30 days;   * `04` = 30-60 days;   * `05` = More than 60 days.
     *
     * @return $this
     */
    public function setPaymentAccInd(?string $payment_acc_ind): static
    {
        if (is_null($payment_acc_ind)) {
            throw new InvalidArgumentException('non-nullable payment_acc_ind cannot be null');
        }
        if ((mb_strlen($payment_acc_ind) > 2)) {
            throw new InvalidArgumentException('invalid length for $payment_acc_ind when calling TdsAdditionalAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($payment_acc_ind) < 2)) {
            throw new InvalidArgumentException('invalid length for $payment_acc_ind when calling TdsAdditionalAttributes., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($payment_acc_ind)))) {
            throw new InvalidArgumentException("invalid value for \$payment_acc_ind when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['payment_acc_ind'] = $payment_acc_ind;

        return $this;
    }

    /**
     * Gets ship_address_usage
     *
     * @return string|null
     */
    public function getShipAddressUsage(): ?string
    {
        return $this->container['ship_address_usage'];
    }

    /**
     * Sets ship_address_usage
     *
     * @param string|null $ship_address_usage Дата первого использования адреса доставки для аккаунта Плательщика в формате YYYYMMDD
     *
     * @return $this
     */
    public function setShipAddressUsage(?string $ship_address_usage): static
    {
        if (is_null($ship_address_usage)) {
            throw new InvalidArgumentException('non-nullable ship_address_usage cannot be null');
        }
        if ((mb_strlen($ship_address_usage) > 8)) {
            throw new InvalidArgumentException('invalid length for $ship_address_usage when calling TdsAdditionalAttributes., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($ship_address_usage) < 8)) {
            throw new InvalidArgumentException('invalid length for $ship_address_usage when calling TdsAdditionalAttributes., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ship_address_usage)))) {
            throw new InvalidArgumentException("invalid value for \$ship_address_usage when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ship_address_usage'] = $ship_address_usage;

        return $this;
    }

    /**
     * Gets ship_address_usage_ind
     *
     * @return string|null
     */
    public function getShipAddressUsageInd(): ?string
    {
        return $this->container['ship_address_usage_ind'];
    }

    /**
     * Sets ship_address_usage_ind
     *
     * @param string|null $ship_address_usage_ind Период времени с момента первого использования адреса доставки для аккаунта Плательщика:   * `01` = This transaction;   * `02` = Less than 30 days;   * `03` = 30-60 days;   * `04` = More than 60 days.
     *
     * @return $this
     */
    public function setShipAddressUsageInd(?string $ship_address_usage_ind): static
    {
        if (is_null($ship_address_usage_ind)) {
            throw new InvalidArgumentException('non-nullable ship_address_usage_ind cannot be null');
        }
        if ((mb_strlen($ship_address_usage_ind) > 2)) {
            throw new InvalidArgumentException('invalid length for $ship_address_usage_ind when calling TdsAdditionalAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ship_address_usage_ind) < 2)) {
            throw new InvalidArgumentException('invalid length for $ship_address_usage_ind when calling TdsAdditionalAttributes., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ship_address_usage_ind)))) {
            throw new InvalidArgumentException("invalid value for \$ship_address_usage_ind when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ship_address_usage_ind'] = $ship_address_usage_ind;

        return $this;
    }

    /**
     * Gets ship_name_indicator
     *
     * @return string|null
     */
    public function getShipNameIndicator(): ?string
    {
        return $this->container['ship_name_indicator'];
    }

    /**
     * Sets ship_name_indicator
     *
     * @param string|null $ship_name_indicator Признак соответствия имени в аккаунте Плательщика и имени получателя заказа:   * `01` = Account Name identical to shipping Name;   * `02` = Account Name different than shipping Name.
     *
     * @return $this
     */
    public function setShipNameIndicator(?string $ship_name_indicator): static
    {
        if (is_null($ship_name_indicator)) {
            throw new InvalidArgumentException('non-nullable ship_name_indicator cannot be null');
        }
        if ((mb_strlen($ship_name_indicator) > 2)) {
            throw new InvalidArgumentException('invalid length for $ship_name_indicator when calling TdsAdditionalAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($ship_name_indicator) < 2)) {
            throw new InvalidArgumentException('invalid length for $ship_name_indicator when calling TdsAdditionalAttributes., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($ship_name_indicator)))) {
            throw new InvalidArgumentException("invalid value for \$ship_name_indicator when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['ship_name_indicator'] = $ship_name_indicator;

        return $this;
    }

    /**
     * Gets suspicious_acc_activity
     *
     * @return string|null
     */
    public function getSuspiciousAccActivity(): ?string
    {
        return $this->container['suspicious_acc_activity'];
    }

    /**
     * Sets suspicious_acc_activity
     *
     * @param string|null $suspicious_acc_activity Признак наличия случаев подозрительной активности (включая предыдущие случаи мошенничества) для аккаунта Плательщика:   * `01` = No suspicious activity has been observed;   * `02` = Suspicious activity has been observed.
     *
     * @return $this
     */
    public function setSuspiciousAccActivity(?string $suspicious_acc_activity): static
    {
        if (is_null($suspicious_acc_activity)) {
            throw new InvalidArgumentException('non-nullable suspicious_acc_activity cannot be null');
        }
        if ((mb_strlen($suspicious_acc_activity) > 2)) {
            throw new InvalidArgumentException('invalid length for $suspicious_acc_activity when calling TdsAdditionalAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($suspicious_acc_activity) < 2)) {
            throw new InvalidArgumentException('invalid length for $suspicious_acc_activity when calling TdsAdditionalAttributes., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($suspicious_acc_activity)))) {
            throw new InvalidArgumentException("invalid value for \$suspicious_acc_activity when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['suspicious_acc_activity'] = $suspicious_acc_activity;

        return $this;
    }

    /**
     * Gets three_ds_req_auth_data
     *
     * @return string|null
     */
    public function getThreeDsReqAuthData(): ?string
    {
        return $this->container['three_ds_req_auth_data'];
    }

    /**
     * Sets three_ds_req_auth_data
     *
     * @param string|null $three_ds_req_auth_data Данные аутентификации Плательщика в ТСП
     *
     * @return $this
     */
    public function setThreeDsReqAuthData(?string $three_ds_req_auth_data): static
    {
        if (is_null($three_ds_req_auth_data)) {
            throw new InvalidArgumentException('non-nullable three_ds_req_auth_data cannot be null');
        }
        if ((mb_strlen($three_ds_req_auth_data) > 20000)) {
            throw new InvalidArgumentException('invalid length for $three_ds_req_auth_data when calling TdsAdditionalAttributes., must be smaller than or equal to 20000.');
        }
        if ((mb_strlen($three_ds_req_auth_data) < 2)) {
            throw new InvalidArgumentException('invalid length for $three_ds_req_auth_data when calling TdsAdditionalAttributes., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^[ -~]*$/", ObjectSerializer::toString($three_ds_req_auth_data)))) {
            throw new InvalidArgumentException("invalid value for \$three_ds_req_auth_data when calling TdsAdditionalAttributes., must conform to the pattern /^[ -~]*$/.");
        }

        $this->container['three_ds_req_auth_data'] = $three_ds_req_auth_data;

        return $this;
    }

    /**
     * Gets three_ds_req_auth_method
     *
     * @return string|null
     */
    public function getThreeDsReqAuthMethod(): ?string
    {
        return $this->container['three_ds_req_auth_method'];
    }

    /**
     * Sets three_ds_req_auth_method
     *
     * @param string|null $three_ds_req_auth_method Способ аутентификации Плательщика в ТСП:   * `01` = No 3DS Requestor authentication occurred (i.e. cardholder “logged in” as guest);   * `02` = Login to the cardholder account at the 3DS Requestor system using 3DS Requestor's own credentials;   * `03` = Login to the cardholder account at the 3DS Requestor system using federated ID;   * `04` = Login to the cardholder account at the 3DS Requestor system using issuer credentials;   * `05` = Login to the cardholder account at the 3DS Requestor system using third-party authentication;   * `06` = Login to the cardholder account at the 3DS Requestor system using FIDO Authenticator;   * `07` = Login to the cardholder account at the 3DS Requestor system using FIDO Authenticator;   * `08` = SRC Assurance Data;   * `09`–`79` = Reserved for EMVCo future use (values invalid until defined by EMVCo);   * `80`–`99` = Reserved for DS use.
     *
     * @return $this
     */
    public function setThreeDsReqAuthMethod(?string $three_ds_req_auth_method): static
    {
        if (is_null($three_ds_req_auth_method)) {
            throw new InvalidArgumentException('non-nullable three_ds_req_auth_method cannot be null');
        }
        if ((mb_strlen($three_ds_req_auth_method) > 2)) {
            throw new InvalidArgumentException('invalid length for $three_ds_req_auth_method when calling TdsAdditionalAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($three_ds_req_auth_method) < 2)) {
            throw new InvalidArgumentException('invalid length for $three_ds_req_auth_method when calling TdsAdditionalAttributes., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($three_ds_req_auth_method)))) {
            throw new InvalidArgumentException("invalid value for \$three_ds_req_auth_method when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['three_ds_req_auth_method'] = $three_ds_req_auth_method;

        return $this;
    }

    /**
     * Gets three_ds_req_auth_timestamp
     *
     * @return string|null
     */
    public function getThreeDsReqAuthTimestamp(): ?string
    {
        return $this->container['three_ds_req_auth_timestamp'];
    }

    /**
     * Sets three_ds_req_auth_timestamp
     *
     * @param string|null $three_ds_req_auth_timestamp Дата и время в UTC аутентификации Плательщика в ТСП в формате YYYYMMDDHHMM
     *
     * @return $this
     */
    public function setThreeDsReqAuthTimestamp(?string $three_ds_req_auth_timestamp): static
    {
        if (is_null($three_ds_req_auth_timestamp)) {
            throw new InvalidArgumentException('non-nullable three_ds_req_auth_timestamp cannot be null');
        }
        if ((mb_strlen($three_ds_req_auth_timestamp) > 12)) {
            throw new InvalidArgumentException('invalid length for $three_ds_req_auth_timestamp when calling TdsAdditionalAttributes., must be smaller than or equal to 12.');
        }
        if ((mb_strlen($three_ds_req_auth_timestamp) < 12)) {
            throw new InvalidArgumentException('invalid length for $three_ds_req_auth_timestamp when calling TdsAdditionalAttributes., must be bigger than or equal to 12.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($three_ds_req_auth_timestamp)))) {
            throw new InvalidArgumentException("invalid value for \$three_ds_req_auth_timestamp when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['three_ds_req_auth_timestamp'] = $three_ds_req_auth_timestamp;

        return $this;
    }

    /**
     * Gets acct_type
     *
     * @return string|null
     */
    public function getAcctType(): ?string
    {
        return $this->container['acct_type'];
    }

    /**
     * Sets acct_type
     *
     * @param string|null $acct_type Тип счета карты Плательщика:   * `01` = Not Applicable;   * `02` = Credit;   * `03` = Debit;   * `04`–`79` = Reserved for EMVCo future use (values invalid until defined by EMVCo);   * `80`–`99` = DS or Payment System-specific.
     *
     * @return $this
     */
    public function setAcctType(?string $acct_type): static
    {
        if (is_null($acct_type)) {
            throw new InvalidArgumentException('non-nullable acct_type cannot be null');
        }
        if ((mb_strlen($acct_type) > 2)) {
            throw new InvalidArgumentException('invalid length for $acct_type when calling TdsAdditionalAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($acct_type) < 2)) {
            throw new InvalidArgumentException('invalid length for $acct_type when calling TdsAdditionalAttributes., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($acct_type)))) {
            throw new InvalidArgumentException("invalid value for \$acct_type when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['acct_type'] = $acct_type;

        return $this;
    }

    /**
     * Gets trans_type
     *
     * @return string|null
     */
    public function getTransType(): ?string
    {
        return $this->container['trans_type'];
    }

    /**
     * Sets trans_type
     *
     * @param string|null $trans_type Тип операции:   * `01` = Goods/ Service Purchase;   * `03` = Check Acceptance;   * `10` = Account Funding;   * `11` = Quasi-Cash Transaction;   * `28` = Prepaid Activation and Load.
     *
     * @return $this
     */
    public function setTransType(?string $trans_type): static
    {
        if (is_null($trans_type)) {
            throw new InvalidArgumentException('non-nullable trans_type cannot be null');
        }
        if ((mb_strlen($trans_type) > 2)) {
            throw new InvalidArgumentException('invalid length for $trans_type when calling TdsAdditionalAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($trans_type) < 2)) {
            throw new InvalidArgumentException('invalid length for $trans_type when calling TdsAdditionalAttributes., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($trans_type)))) {
            throw new InvalidArgumentException("invalid value for \$trans_type when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['trans_type'] = $trans_type;

        return $this;
    }

    /**
     * Gets addr_match
     *
     * @return string|null
     */
    public function getAddrMatch(): ?string
    {
        return $this->container['addr_match'];
    }

    /**
     * Sets addr_match
     *
     * @param string|null $addr_match Признак соответствия адреса доставки товара и адреса доставки счета:   * `Y` = Shipping Address matches Billing Address;   * `N` = Shipping Address does not match Billing Address.
     *
     * @return $this
     */
    public function setAddrMatch(?string $addr_match): static
    {
        if (is_null($addr_match)) {
            throw new InvalidArgumentException('non-nullable addr_match cannot be null');
        }
        if ((mb_strlen($addr_match) > 1)) {
            throw new InvalidArgumentException('invalid length for $addr_match when calling TdsAdditionalAttributes., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($addr_match) < 1)) {
            throw new InvalidArgumentException('invalid length for $addr_match when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[A-Za-z]*$/", ObjectSerializer::toString($addr_match)))) {
            throw new InvalidArgumentException("invalid value for \$addr_match when calling TdsAdditionalAttributes., must conform to the pattern /^[A-Za-z]*$/.");
        }

        $this->container['addr_match'] = $addr_match;

        return $this;
    }

    /**
     * Gets three_ds_requestor_challenge_ind
     *
     * @return string|null
     */
    public function getThreeDsRequestorChallengeInd(): ?string
    {
        return $this->container['three_ds_requestor_challenge_ind'];
    }

    /**
     * Sets three_ds_requestor_challenge_ind
     *
     * @param string|null $three_ds_requestor_challenge_ind Признак необходимости проведения Challenge c Плательщиком:   * `01` = No preference;   * `02` = No challenge requested;   * `03` = Challenge requested 3DS Requestor Preference;   * `04` = Challenge requested Mandate;   * `05`–`79` = Reserved for EMVCo future use (values invalid until defined by EMVCo);   * `80`-`99` = Reserved for DS use.
     *
     * @return $this
     */
    public function setThreeDsRequestorChallengeInd(?string $three_ds_requestor_challenge_ind): static
    {
        if (is_null($three_ds_requestor_challenge_ind)) {
            throw new InvalidArgumentException('non-nullable three_ds_requestor_challenge_ind cannot be null');
        }
        if ((mb_strlen($three_ds_requestor_challenge_ind) > 2)) {
            throw new InvalidArgumentException('invalid length for $three_ds_requestor_challenge_ind when calling TdsAdditionalAttributes., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($three_ds_requestor_challenge_ind) < 2)) {
            throw new InvalidArgumentException('invalid length for $three_ds_requestor_challenge_ind when calling TdsAdditionalAttributes., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($three_ds_requestor_challenge_ind)))) {
            throw new InvalidArgumentException("invalid value for \$three_ds_requestor_challenge_ind when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['three_ds_requestor_challenge_ind'] = $three_ds_requestor_challenge_ind;

        return $this;
    }

    /**
     * Gets purchase_instal_data
     *
     * @return string|null
     */
    public function getPurchaseInstalData(): ?string
    {
        return $this->container['purchase_instal_data'];
    }

    /**
     * Sets purchase_instal_data
     *
     * @param string|null $purchase_instal_data Максимальное количество авторизаций для Installment платежей
     *
     * @return $this
     */
    public function setPurchaseInstalData(?string $purchase_instal_data): static
    {
        if (is_null($purchase_instal_data)) {
            throw new InvalidArgumentException('non-nullable purchase_instal_data cannot be null');
        }
        if ((mb_strlen($purchase_instal_data) > 3)) {
            throw new InvalidArgumentException('invalid length for $purchase_instal_data when calling TdsAdditionalAttributes., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($purchase_instal_data) < 1)) {
            throw new InvalidArgumentException('invalid length for $purchase_instal_data when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($purchase_instal_data)))) {
            throw new InvalidArgumentException("invalid value for \$purchase_instal_data when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['purchase_instal_data'] = $purchase_instal_data;

        return $this;
    }

    /**
     * Gets recurring_expiry
     *
     * @return string|null
     */
    public function getRecurringExpiry(): ?string
    {
        return $this->container['recurring_expiry'];
    }

    /**
     * Sets recurring_expiry
     *
     * @param string|null $recurring_expiry Дата последнего рекуррентного платежа в формате YYYYMMDD
     *
     * @return $this
     */
    public function setRecurringExpiry(?string $recurring_expiry): static
    {
        if (is_null($recurring_expiry)) {
            throw new InvalidArgumentException('non-nullable recurring_expiry cannot be null');
        }
        if ((mb_strlen($recurring_expiry) > 8)) {
            throw new InvalidArgumentException('invalid length for $recurring_expiry when calling TdsAdditionalAttributes., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($recurring_expiry) < 8)) {
            throw new InvalidArgumentException('invalid length for $recurring_expiry when calling TdsAdditionalAttributes., must be bigger than or equal to 8.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($recurring_expiry)))) {
            throw new InvalidArgumentException("invalid value for \$recurring_expiry when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['recurring_expiry'] = $recurring_expiry;

        return $this;
    }

    /**
     * Gets recurring_frequency
     *
     * @return string|null
     */
    public function getRecurringFrequency(): ?string
    {
        return $this->container['recurring_frequency'];
    }

    /**
     * Sets recurring_frequency
     *
     * @param string|null $recurring_frequency Минимальное количество дней между рекуррентными платежами
     *
     * @return $this
     */
    public function setRecurringFrequency(?string $recurring_frequency): static
    {
        if (is_null($recurring_frequency)) {
            throw new InvalidArgumentException('non-nullable recurring_frequency cannot be null');
        }
        if ((mb_strlen($recurring_frequency) > 4)) {
            throw new InvalidArgumentException('invalid length for $recurring_frequency when calling TdsAdditionalAttributes., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($recurring_frequency) < 1)) {
            throw new InvalidArgumentException('invalid length for $recurring_frequency when calling TdsAdditionalAttributes., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($recurring_frequency)))) {
            throw new InvalidArgumentException("invalid value for \$recurring_frequency when calling TdsAdditionalAttributes., must conform to the pattern /^\\d+$/.");
        }

        $this->container['recurring_frequency'] = $recurring_frequency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


