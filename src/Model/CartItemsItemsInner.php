<?php
/**
 * CartItemsItemsInner
 *
 * PHP version 8.1
 *
 * @package  SberPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API платёжного шлюза Сбербанка
 *
 * Настоящий документ описывает программные интерфейсы платёжного шлюза Сбербанка, который позволяет проводить платежи в интернет-эквайринге.  По вопросам работы с API необходимо обращаться в Службу Поддержки (email: <a href=\"mailto:support@ecom.sberbank.ru\">support@ecom.sberbank.ru</a>). При обращении желательно указывать, что вопрос по целевому шлюзу интернет-эквайринга.  По вопросам получения доступов, операционой деятельности и прочим вопросам обслуживания необходимо обращаться к вашему менеджеру.  ## История изменений |Дата       |Версия документа|Описание изменений |-----------|----------------|--------------------------------------------------------------------------------------------------------------- |15.03.2024 |1.0.6           |Добавлена информация по сервисам смены пароля, POS-кредитования |15.12.2023 |1.0.5           |Добавлена информация по повышению конверсии платежей |03.10.2023 |1.0.4           |Добавлена документация по фискализации, СБП. Добавлено видео по работе в личном кабинете. |18.07.2023 |1.0.3           |Добавлена документация по работе со связками |18.07.2023 |1.0.2           |Добавлена документация по тестированию SberPay, внесены коррективы в описание сервисов. Добавлены тестовые карты |14.06.2023 |1.0.1           |Добавлено описание регистрации QR-ссылок. Добавлены примеры запросов и ответов для различных бизнес-сценариев |21.05.2023 |1.0.0           |Начальная версия openAPI  # Общая информация  ## Термины * __Платёжный шлюз (ПШ, Шлюз)__ — комплекс решений для осуществления процесса интернет-эквайринга с использованием различных платёжных средств. * __Клиент__ — система или лицо, которое взаимодействует с ПШ. * __Плательщик__ — физическое или юридическое лицо, совершающее платёж по своей карте за услуги мерчанта в ПШ. * __Заказ__ — элементарная сущность ПШ, описывающее заказ в некотором интернет-магазине или его аналоге. * __Одностадийный платёж__ — операция по оплате товаров/услуг, не требующая дополнительного подтверждения (Завершения), то есть блокирование и списание средств происходит в один этап. Этот вид платежей предпочтительней, если товар или услуга предоставляется сразу после оплаты. * __Двухстадийный платёж__ — операция по оплате товаров/услуг, требующая дополнительного подтверждения (Завершения), то есть оплата производится в два этапа. На первом этапе происходит проверка наличия и блокирование средств плательщика (предавторизация); далее, на втором этапе, компания либо подтверждает необходимость списания средств, либо отменяет блокировку средств. Сумма списания может отличаться от суммы блокировки в меньшую сторону. * __Холдирование (Блокировка средств)__ - Состояние суммы средств, предназначенных для возмещения по проведенной операции, с момента успешной авторизации до момента завершения расчетов между банками-участниками. На данном этапе средства еще находятся на счете Плательщика, но уже недоступны для использования на карте. * __Возврат средств (Refund)__ — частичный или полный возврат денежных средств Плательщика в случае его отказа от получения товара/услуг или его возврата. Возврат — это офлайн-операция, которая производится после списания денежных средств с Плательщика. Сроки возмещения, как правило, зависят от банка-эмитента и могут достигать 30 дней. * __Отмена операции оплаты (Reversal)__ — операция снятия (отмены) удержания денежных средств Плательщика. Отмена — это онлайн-операция, то есть эмитент карты сразу получает запрос на разблокировку суммы. Отмена может быть произведена до начала взаиморасчётов банков-участников, поэтому доступна ограниченное время. * __Связка__ — соответствие между Плательщиком и платёжными реквизитами карты (номер карты или токена и срок его действия). * __3-D Secure (3DS)__ — протокол дополнительной аутентификации Плательщика, основанный на концепции трёх доменов: эквайрера, эмитента и совместимости. * __Access Control Server (ACS)__ — элемент инфраструктуры 3-D Secure, обеспечивающий аутентификацию Плательщика на стороне банка-эмитента.  * __MPI, 3DS Server__ — элемент инфраструктуры 3-D Secure на стороне банка-эквайрера или Клиента. * __Фискализация__ (__54-ФЗ__) - процедура формирования фискального чека по успешно оплаченному Заказу. В данное понятие входит как формирование чека по успешной оплате, так и формирование чека возврата, закрывающего чека и т.д. * __ФФД__ - Формат Фискальных Документов. Стандарт Федеральной Налоговой Службы, согласно которому формируются все фискальные чеки.  ## Обработка сообщений  * Координаты подключения. Информация о координатах подключения к тестовой среде также доступна в индивидуальном разделе для каждого сервиса (в правой части страницы).  <span style=\"color:red;\">__Внимание!__</span> Для корректного взаимодействия со шлюзом необходимо [установить сертификат НУЦ Минцифры](https://www.sberbank.com/ru/certificates).  <span style=\"color:red;\">__Внимание!__</span> На тестовом контуре предусмотрены технические окна: в будние дни зарезервированы временные интервалы 9:00 - 10:00 и 18:00 - 20:00 в течение которых могут осуществляться работы по внедрению функционала на тестовый стенд. Стабильность работоспособности контура в это время не гарантируется.  Тестовая среда: https://ecomtest.sberbank.ru/ecomm/gw/partner/api/v1/.  Боевая среда: https://ecommerce.sberbank.ru/ecomm/gw/partner/api/v1/. * Платёжный шлюз представляет HTTP REST сервисы методом POST, с передачей в заголовках \"Content-Type: application/json\" и набором символов в кодировке UTF-8. Сообщения передаются в формате JSON (RFC 7159); * Наименования объектов в сервисах передаются с учетом регистра; * При взаимодействии используется протокол TLS версии 1.2; * После регистрации Клиента, предоставляются логин и пароль, который необходимо использовать при подключении к ПШ; * Для взаимодействия с сервисами ПШ требуется [установить сертификат НУЦ Минцифры](https://www.sberbank.com/ru/certificates).      ## Сценарии проведения платежей  ### Ввод реквизитов на стороне Клиента без 3DS на стороне Шлюза <a href='img/sequence_external_card_no_3DS.png' target='_blank'><img src='img/sequence_external_card_no_3DS.png'></a>  ### Ввод реквизитов на стороне Клиента c 3DS на стороне Шлюза <a href='img/sequence_external_card_3DS.png' target='_blank'><img src='img/sequence_external_card_3DS.png'></a>  ### Ввод реквизитов на стороне Клиента с упрощённым 3DS на стороне Шлюза <a href='img/sequence_external_card_simplified_3DS.png' target='_blank'><img src='img/sequence_external_card_simplified_3DS.png'></a>  ### Ввод реквизитов на стороне Шлюза <a href='img/sequence_payment_page.png' target='_blank'><img src='img/sequence_payment_page.png'></a>  ### Оплата с использованием связок  Общий алгоритм проведения оплаты по связке.  Сценарий разбит на два этапа:  ##### 1. Создание связки.   <a href='img/sequence_binding_create.png' target='_blank'><img src='img/sequence_binding_create.png'></a>  Ниже приведено краткое описание алгоритма создания связки.   1.1. После получения согласия со стороны Плательщика на дальнейшее использование данных карты для проведения оплат, Клиент регистрирует заказ с помощью registerPreAuth.do (register.do) с обязательной передачей параметра clientId.   <span style=\"color:red;\">__Внимание!__</span> В случае отсутствия указанного параметра в запросе связка не будет создана.  Рекомендуется использовать registerPreAuth.do во избежание списания средств по заказу.  В запросе так же может быть передан features=VERIFY. В этом случае сумма заказа должна составлять 0 рублей 0 копеек, средства с Плательщика не списываются. При этом сохраняется проведение всех необходимых проверок. Данный способ регистрации заказа является наиболее корректным для формирования связок.  1.2. Плательщик оплачивает заказ со всеми аттрибутами: вводом карточных данных и 3DS или оплатой операции через SberPay.  1.3. При успешной оплате заказа будет создана связка, идентификатор которой можно будет получить с помощью запросов getOrderStatusExtended.do и/или getBindings.do.  1.4. Опциональный шаг. При необходимости возврата средств по заказу (при авторизации на сумму, отличную от 0 рублей 0 копеек) может быть направлен запрос reverse.do. Отмена требуется для предотвращения фактического списания средств в случае использования технической операции для привязки карты.  ___Создание связки завершено.___  ##### 2. Оплата с использованием связки  <a href='img/sequence_binding_payment.png' target='_blank'><img src='img/sequence_binding_payment.png'></a>  Ниже приведено краткое описание алгоритма проведения оплаты с использованием имеющейся связки.  Доступно несколько путей оплаты, инициатором которой может выступать как Плательщик, так и Клиент.  1. Инициатором выступает Клиент.  Способ 1.  1.1.1. Клиент отправляет запрос recurrentPayment.do.  1.1.2. Платежный шлюз обогащает запрос данными карты, соответствующими полученному от Клиента bindingId.  1.1.3. Проводится авторизация с использованием данных карт, заполненных в п. 1.1.2.  1.1.4. Клиенту направляется результат авторизации.  Способ 2.  1.2.1. Клиент регистрирует заказ с помощью register.do / registerPreAuth.do с обязательной передачей параметра clientId.  1.2.2. Инициируется оплата заказа с помощью paymentOrderBinding.do с передачей параметра bindingId.  <span style=\"color:red;\"> __Внимание!__ </span> Параметр bindingId должен соответствовать переданному при регистрации заказа clientId. В случае попытки оплаты связкой, созданной для другого clientId вернется ошибка \"Заказ не может быть оплачен данной связкой\"  1.2.3. Платежный шлюз проверяет соответствие clientId и bindingId. При корректном результате проверки Платежный шлюз обогащает запрос данными карты, соответствующими переданному значению bindingId.  1.2.4. Проводится авторизация с использованием данных карт, заполненных в п. 1.2.3.  1.2.5. Клиенту направляется результат авторизации.  2. Инициатором выступает Плательщик.  2.1. Плательщик выбирает оплату сохраненной картой.  2.2. Клиент регистрирует заказ с помощью register.do / registerPreAuth.do с обязательной передачей параметра clientId.  2.3. Инициируется оплата заказа с помощью paymentOrderBinding.do с передачей параметра bindingId.  <span style=\"color:red;\"> __Внимание!__</span> Параметр bindingId должен соответствовать переданному при регистрации заказа clientId. В случае попытки оплаты связкой, созданной для другого clientId вернется ошибка \"Заказ не может быть оплачен данной связкой\"  2.4. Платежный шлюз проверяет соответствие clientId и bindingId. При корректном результате проверки Платежный шлюз обогащает запрос данными карты, соответствующими переданному значению bindingId.  2.5. Проводится авторизация с использованием данных карт, заполненных в п. 1.2.3.  2.6. Клиенту направляется результат авторизации.  2.7. Клиент оповещает Плательщика о результате авторизации.    **Внимание!** При несоответствии clientId и bindingId Клиенту возвращается ошибка \"Заказ не может быть оплачен данной связкой\".  ## Повышение конверсии платежей В сфере электронной коммерции конверсия является одним из важнейших показателей. При корректной интеграции и интуитивном клиентском пути одним из основных способов улучшения показателей является передача дополнительных параметров.  Дополнительные параметры позволяют получить более полную информацию о клиентах и их платежных операциях, позволяя весомо снизить риски мошенничества и исключить избыточные блокировки операций со стороны Банка, НСПК и иных эмитентов. Передача дополнительных параметров доступна при регистрации заказа и в сервисах оплаты в блоках __jsonParams__ или __additionalParameters__ в соответствии с описанием сервиса в документации.  __Передача корзины и идентификатора аккаунта плательщика__ партнера являются наиболее весомыми факторами, позволяющими повысить конверсию. Передача корзины заказа может использоваться без функционала фискализации.  Дополнительные параметры могут пересекаться с параметрами 3DS и в большинстве случаев влияют на результат аутентификации плательщика, повышая вероятность работы по frictionless flow.    ## Состояния заказа в Шлюзе <a href='img/state_orderStatus.png' target='_blank'><img src='img/state_orderStatus.png'></a>  ## Описание кодов ответа Шлюза  Каждый заказ имеет 3 попытки оплаты до истечения срока действия заказа (по умолчанию — 20 минут, значение может быть указано при регистрации заказа). |actionCode|actionCodeDescription                                                                                                              |Расшифровка кода ответа                                                                                                                                                                    |Рекомендация для Клиента/Плательщика                                                 |----------|-----------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------ |-5031     |_Ошибка при оплате СБП_ Подписка клиента не найдена |-3101     |                                                                                                                                   |Плательщик запретил выполнение операций по данной связке                                                                                                                                   |Повторить оплату с использованием альтернативного инструмента платежа |-3100     |Связка деактивирована                                                                                                              |Повторить оплату с использованием альтернативного инструмента платежа |-2020     |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Полученный в операции ECI не соответствует допустимым значениям для данной МПС                                                                                                             |Повторить оплату с использованием альтернативного инструмента платежа |-2019     |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Получена ошибка в процессе обработки 3-D Secure сообщений                                                                                                                                  |Повторить оплату с использованием альтернативного инструмента платежа |-2018     |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Недоступность Directory Server МПС                                                                                                                                                         |Повторить попытку позже (но в пределах лимита времени, отведенного на оплату заказа) или использовать альтернативный инструмент оплаты заказа |-2017     |Операция отклонена. Обратитесь в магазин                                                                                           |Плательщик не аутентифицирован (статус 3-D Secure не Y)                                                                                                                                    |Не пройдена 3ds-аутентификация держателя карты. Повторить оплату с использованием альтернативного инструмента платежа |-2016     |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Невозможно провести аутентификацию Плательщика (статус 3-D Secure U)                                                                                                                       |Возникла ошибка во время проверки возможности проведения 3ds-аутентификация держателя карты в банке-эмитенте. Необходимо повторить попытку или использовать альтернативный инструмент оплаты заказа |-2015     |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Получена ошибка в процессе обработки 3-D Secure сообщений                                                                                                                                  |Повторить оплату с использованием альтернативного инструмента платежа |-2013     |Исчерпаны попытки оплаты                                                                                                           |Исчерпаны попытки оплаты                                                                                                                                                                   |Для данного заказа превышено установленное количество попыток оплаты. Необходимо создать новый заказ |-2011     |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Невозможно провести аутентификацию Плательщика (статус 3-D Secure U)                                                                                                                       |Возникла ошибка во время проверки возможности проведения 3ds-аутентификация держателя карты в банке-эмитенте. Необходимо повторить попытку или использовать альтернативный инструмент оплаты заказа |-2010     |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Ошибка при валидации 3-D Secure сообщений (несовпадение XID)                                                                                                                               |Повторить оплату с использованием альтернативного инструмента платежа |-2007     |Истек срок ожидания ввода данных                                                                                                   |Истек срок, отведенный на оплату заказа с момента регистрации платежа (таймаут по умолчанию - 20 мин, продолжительность может быть указана при создании заказа)                        |Необходимо создать новый заказ |-2006     |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Аутентификация Плательщика завершена неуспешно (статус 3-D Secure N)                                                                                                                       |Аутентификация держателя карты в банке-эмитенте прошла неуспешно. Необходимо повторить попытку или использовать альтернативный инструмент оплаты заказа |-2005     |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Ошибка при валидации 3-D Secure сообщений                                                                                                                                                  |Аутентификация держателя карты в банке-эмитенте прошла неуспешно. Необходимо повторить попытку или использовать альтернативный инструмент оплаты заказа |-100      |                                                                                                                                   |Не было попыток оплаты                                                                                                                                                                     |Необходимо оплатить заказ |-99       |_Ошибка при оплате СБП_ Операция в обработке. Для операций Оплата/возврат СБП, Оплата с прерыванием и отмены/возвраты по QR POS    |Транзакция в обработке                                                                                                                                                                     |Действий не требуется |0         |                                                                                                                                   |Платеж успешно прошел                                                                                                                                                                      |Действий не требуется |1         |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Для успешного завершения транзакции требуется подтверждение личности                                                                                                                       |Держателю карты необходимо обратиться в банк-эмитент для подтверждения операции |5         |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Отказ сети проводить транзакцию                                                                                                                                                            |Повторить оплату с использованием альтернативного инструмента платежа |7         |Операция отклонена. Обратитесь в магазин                                                                                           |Изъять карту. Мошенничество                                                                                                                                                                |Повторить оплату с использованием альтернативного инструмента платежа |12        |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Предпринята попытка выполнить транзакцию на сумму, превышающую лимит, заданный банком-эмитентом                                                                                            |Отклонение запроса процессингом банка-эмитента по причине несоответствия суммы операции условиям ее проведения. Оплату заказа можно повторить с использованием альтернативного инструмента платежа |13        |Операция отклонена. Обратитесь в магазин                                                                                           |Неверно указана сумма транзакции                                                                                                                                                           |Повторить оплату с использованием альтернативного инструмента платежа |14        |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Неверный номер карты                                                                                                                                                                       |Проверить реквизиты карты или использовать другой инструмент для оплаты заказа. При получении ответа при оплате связкой — необходимо удалить связку |15        |Ошибка проведения платежа. Попробуйте позднее. Если данная ошибка возникла повторно, обратитесь в Ваш банк для разъяснения причин  |МПС не смогла определить эмитента карты                                                                                                                                                    |Повторить оплату с использованием альтернативного инструмента платежа |31        |Нет связи с банком. Повторите позже                                                                                                |Нет связи с банком, выпустившим карту                                                                                                                                                      |Повторить позже или использовать другой инструмент/метод оплаты |41        |Операция отклонена. Обратитесь в магазин                                                                                           |Изъять карту. Карта утеряна                                                                                                                                                                |В процессинге банка-эмитента карта помечена как утерянная. Следует использовать альтернативный инструмент платежа. При получении ответа при оплате связкой — необходимо удалить связку |43        |Операция отклонена. Обратитесь в магазин                                                                                           |Изъять карту. Карта украдена                                                                                                                                                               |В процессинге банка-эмитента карта помечена как украденная. Следует использовать альтернативный инструмент платежа. При получении ответа при оплате связкой — необходимо удалить связку |53        |Операция отклонена. Обратитесь в магазин                                                                                           |Карты не существует в системах процессинга                                                                                                                                                 |Отказ от процессинга банка-эмитента по причине закрытия счета или запроса или неверного типа счета. Оплату заказа можно повторить с использованием альтернативного инструмента платежа. При получении ответа при оплате связкой — необходимо удалить связку |61        |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Предпринята попытка выполнить транзакцию на сумму, превышающую дневной лимит, заданный банком-эмитентом                                                                                    |Плательщику рекомендуется проверить установленные ограничения в банке-эмитенте или повторить оплату с использованием альтернативного инструмента платежа |62        |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Карта заблокирована                                                                                                                                                                        |В процессинге банка-эмитента на карту наложены ограничения. Оплату заказа можно повторить с использованием альтернативного инструмента платежа |65        |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Превышен лимит на число транзакций: клиент выполнил максимально разрешенное число транзакций в течение лимитного цикла и пытается провести еще одну, либо клиентом самостоятельно установлено ограничение на выполнение операций без 3DS аутентификации                                        |Плательщику рекомендуется проверить установленные ограничения в банке-эмитенте или повторить оплату с использованием альтернативного инструмента платежа |75        |Операция отклонена. Обратитесь в магазин                                                                                           |Превышено допустимое число попыток ввода ПИН. Вероятно карта временно заблокирована                                                                                                        |Оплату заказа можно повторить с использованием альтернативного инструмента платежа |76        |Операция отклонена. Обратитесь в магазин                                                                                           |Не найдена транзакция (в случае завершения, отмены или возврата)                                                                                                                           |Требуется создание нового заказа |81        |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Отказ в проведении операции со стороны банка-эмитента                                                                                                                                      |Проверить реквизиты карты или использовать другой инструмент для оплаты заказа |82        |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Некорректный CVC                                                                                                                                                                           |Проверить реквизиты карты или использовать другой инструмент для оплаты заказа |93        |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Транзакция незаконна                                                                                                                                                                       |Попытка провести транзакцию, нарушающую требования законодательства. Клиенту рекомендуется сообщить об отказе в выполнении операции без детализации причины |94        |Операция отклонена. Обратитесь в магазин                                                                                           |Получен дубликат транзакции (в случае завершения или отмены)                                                                                                                               |Требуется уточнить статус обработки |96        |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Невозможно провести операцию                                                                                                                                                               |Повторить позже или использовать другой инструмент/метод оплаты |101       |Операция отклонена. Проверьте введенные данные, достаточность средств на карте и повторите операцию                                |Истек срок действия карты                                                                                                                                                                  |Рекомендовать держателю проверить корректность введенного срока действия карты и повторить оплату, либо использовать альтернативный инструмент оплаты заказа. При получении ответа при оплате связкой — необходимо удалить связку |103       |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Нет связи с банком-бмитентом                                                                                                                                                               |Повторить попытку позже (но в пределах лимита времени, отведенного на оплату заказа) или использовать альтернативный инструмент оплаты заказа |104       |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Попытка выполнения операции по счету, на использование которого наложены ограничения                                                                                                       |В процессинге банка-эмитента на карту наложены ограничения. Оплату заказа можно повторить с использованием альтернативного инструмента платежа |106       |Операция отклонена. Обратитесь в магазин                                                                                           |Некорректный ПИН. Вероятно карта временно заблокирована                                                                                                                                    |Оплату заказа можно повторить с использованием альтернативного инструмента платежа |107       |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Следует обратиться к банку-эмитенту                                                                                                                                                        |Оплату заказа можно повторить с использованием альтернативного инструмента платежа |109       |Операция отклонена. Обратитесь в магазин / _Ошибка при оплате СБП_ Оплата в ТСТ приостановлена                                     |Неверно указан идентификатор мерчанта/терминала или АСС заблокирован на уровне процессинга                                                                                                 |Клиенту необходимо связаться с Банком для уточнения причин |110       |_Ошибка при оплате СБП_ Некорректный формат запроса или данные не найдены                                                          |Ошибка при формировании запроса                                                                                                                                                            |Клиенту необходимо проверить корректность использования параметров в запросе |111       |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Неверный номер карты                                                                                                                                                                       |Проверить реквизиты карты или использовать другой инструмент для оплаты заказа. При получении ответа при оплате связкой — необходимо удалить связку |116       |Операция отклонена. Проверьте введенные данные, достаточность средств на карте и повторите операцию                                |Сумма транзакции превышает доступный остаток средств на выбранном счете                                                                                                                    |Рекомендовать держателю карты проверить достаточность средств на счете используемой карты, повторить попытку |118       |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Сервис не разрешён (отказ от банка-эмитента)                                                                                                                                               |В настоящее время данный код не используется |120       |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Отказ в проведении операции - транзакция не разрешена эмитентом                                                                                                                            |Одна из возможных причин – установленное на уровне продукта ограничение в процессинге банка-эмитента. Оплату заказа можно повторить с использованием альтернативного инструмента платежа |125       |Операция отклонена. Проверьте введенные данные, достаточность средств на карте и повторите операцию                                |Неверный номер карты. Попытка возврата на сумму больше холда, попытка возврата нулевой суммы                                                                                               |Проверить реквизиты карты или использовать другой инструмент для оплаты заказа |239       |Операция отклонена. По требованию банка, выпустившего карту, необходимо отменить подписку                                          |Банк, выпустивший карту, отклонил авторизацию и направил код ответа, подразумевающий отмену подписки, по которой направлялась авторизация                                                  |Проверить реквизиты карты или использовать другой инструмент для оплаты заказа. При получении ответа при оплате связкой — необходимо удалить связку |258       |_Ошибка при оплате СБП_ ТСТ не найдено в системе                                                                                   |Неверно указан идентификатор терминала.                                                                                                                                                    |Клиенту необходимо связаться с Банком для уточнения причин |400       |                                                                                                                                   |Реверсал обработан                                                                                                                                                                         |Успешная отмена. Действий не требуется |902       |Операция отклонена. Обратитесь в банк, выпустивший карту  / _В случае операции по СБП_ Операция не была проведена успешно          |Ограничение по карте (владелец карты пытается выполнить транзакцию, которая для него не разрешена)                                                                                         |Ошибка при обработке транзакции в процессинге банка-эмитента. Оплату заказа можно повторить с использованием альтернативного инструмента платежа |904       |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Ошибочный формат сообщения с точки зрения банка эмитента.                                                                                                                                  |Повторить оплату с использованием альтернативного инструмента платежа |909       |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Невозможно провести операцию                                                                                                                                                               |Повторить позже или использовать другой инструмент/метод оплаты |910       |Нет связи с банком. Повторите позже                                                                                                |Банк-эмитент недоступен                                                                                                                                                                    |Повторить позже или использовать другой инструмент/метод оплаты |913       |Операция отклонена. Обратитесь в банк, выпустивший карту                                                                           |Неверный формат сообщения (Неправильный формат транзакции с точки зрения сети)                                                                                                             |При регистрации заказа был указан неверный код валюты. Необходимо создать новый заказ с корректной валютой. |914       |Операция отклонена. Обратитесь в магазин / _В случае операции по СБП_ Оригинальный заказ для отмены не найден                      |Не найдена транзакция (когда посылается завершение или отмена или возврат)                                                                                                                 |Требуется создание нового заказа |999       |Операция отклонена. Обратитесь в магазин / _В случае операции по СБП_ подозрительная операция                                      |Отсутствует начало авторизации транзакции. Отклонено по причине мошенничества или ошибка 3-D Secure                                                                                        |Возможная причина – превышена допустимая разница по времени проведения операции и ее отмены/завершения. Для возврата средств держателю карты необходимо использовать операцию возврата. |1001      |Не получен ответ от банка. Повторите позже                                                                                         |Пусто (Выставляется в момент регистрации транзакции, т.е. когда еще по транзакции не было введено данных карт)                                                                             |Использовать другой инструмент/метод оплаты |1004      |_Ошибка при оплате СБП_ Операция не разрешена партнеру                                                                             |Ошибка при проведении операции (наиболее вероятная причина - не установлены соответствующие разрешения на терминале)                                                                       |Клиенту необходимо связаться с Банком для уточнения причин |1014      |Операция отклонена. Обратитесь в магазин                                                                                           |Код отказа платёжного шлюза по умолчанию                                                                                                                                                   |Повторить позже или использовать другой инструмент/метод оплаты |1015      |Операция отклонена. Проверьте введенные данные, достаточность средств на карте и повторите операцию                                |Введены неправильные параметры карты                                                                                                                                                       |Проверить реквизиты карты или использовать другой инструмент для оплаты заказа |1018      |Не получен ответ от банка. Повторите позже                                                                                         |Таймаут в процессинге Не удалось отправить                                                                                                                                                 |Повторить позже или использовать другой инструмент/метод оплаты |1019      |Не получен ответ от банка. Повторите позже                                                                                         |Таймаут в процессинге Удалось отправить, но не получен ответ от банка                                                                                                                      |Повторить позже или использовать другой инструмент/метод оплаты |2002      |Операция отклонена. Обратитесь в магазин / _В случае операции по СБП_ Нарушена последовательность запросов                         |Неверная операция                                                                                                                                                                          |Попытка завершить оплату в двухстадийном сценарии при неуспешно обработанной предварительной авторизации. Необходимо создать новый заказ |2003      |Операция отклонена. Обратитесь в магазин                                                                                           |Операции без 3-D Secure запрещены Клиенту                                                                                                                                                  |Оплата без дополнительной аутентификации держателей карт (3ds) не разрешена для магазина и попытка аутентификации завершилась неуспешно. Рекомендуется использовать другой инструмент/метод оплаты |2004      |Операция отклонена. Обратитесь в магазин                                                                                           |Оплата через SSL без ввода CVС2 запрещена                                                                                                                                                  |Оплата без ввода проверочного кода с карты не разрешена для магазина. Повторить оплату заказа с обязательным вводом проверочного кода карты (CVC2/CVV2/CVP2) держателем  |2005      |Операция отклонена. Обратитесь в магазин                                                                                           |Платеж не соответствует условиям проверки по 3-D Secure для Клиента                                                                                                                        |Использовать другой инструмент/метод оплаты |2007      |Операция отклонена. Обратитесь в магазин                                                                                           |Заказ уже оплачен                                                                                                                                                                          |Заказ был оплачен ранее. Действий не требуется |2009      |Операция отклонена. Обратитесь в магазин _В случае операции по СБП_ Сумма отмены/возврата больше суммы оригинальной транзакции     |Сумма возврата превышает сумму оплаты                                                                                                                                                      |Проверить сумму операции, скорректировать при необходимости и повторить возврат или завершение |2016      |Операция отклонена. Обратитесь в магазин                                                                                           |Мерчант не имеет разрешения на 3-D Secure, необходимое для проведения платежа                                                                                                              |Попытка провести операцию с 3ds-аутентификацией держателя карты в магазине, который не имеет установленного разрешения на это. Необходимо создать новый заказ   ## Описание кодов ошибок Шлюза |errorCode|errorMessage                                                                                                             |---------|------------------------------------------------------------------------------------------------------------------------------ |0        |Обработка запроса прошла без системных ошибок                                                                                  |0        |Запрос принят в обработку |1        |Заказ с таким номером уже обработан                                                                                            |1        |Заказ не может быть оплачен данной связкой                                                                                     |1        |Неверный номер карты                                                                                                           |1        |Срок действия карты неверен                                                                                                    |1        |Создание связок по данной карте недоступно                                                                                     |1        |Связка не найдена                                                                                                             |2        |Связка неактивна                                                                                                               |2        |Связка уже создана                                                                                                             |2        |Неверное состояние связки                                                                                                      |3        |Не найдена валюта с кодом:                                                                                                     |4        |В запросе не передан обязательный параметр или передан некорректный обязательный параметр                                      |4        |Username не соответствует значению при регистрации заказа                                                                      |4        |Номер заказа не может быть пуст                                                                                                |5        |Неверный параметр операции                                                                                                     |5        |Доступ запрещен                                                                                                                |5        |Операция запрещена                                                                                                             |5        |Мерчант не найден в системе                                                                                                    |5        |Терминал не найден в системе                                                                                                   |5        |Заказ не найден                                                                                                                |5        |Срок жизни заказа истек                                                                                                        |5        |Неверный статус заказа                                                                                                         |5        |Неверная сумма                                                                                                                 |5        |Нельзя провести частичную отмену более одного раза                                                                             |5        |Сумма завершения превышает сумму холдирования                                                                                  |5        |Общая сумма возвратов превышает сумму заказа                                                                                   |5        |Ошибка валидации данных запроса                                                                                                |5        |Ошибка при проведении операции                                                                                                 |5        |Ошибка при выполнении запроса                                                                                                  |5        |При отсутствующем orderId не заполнен OrderNumber                                                                              |5        |Превышено допустимое количество попыток оплаты                                                                                 |5        |Error, value of the request parameter                                                                                          |5        |Невозможно оплатить заказ - заблокирован другим действием                                                                      |5        |Невозможно завершить оплату заказа - заблокирован другим действием                                                             |5        |Невозможно отменить заказ - заблокирован другим действием                                                                      |5        |Операция отклонена. Проверьте введенные данные, достаточность средств на карте и повторите операцию. Происходит переадресация  |6        |Неверныий номер заказа                                                                                                          |7        |Не найдена успешная предавторизация                                                                                            |7        |Общая сумма возвратов превышает сумму заказа                                                                                   |7        |Не найдена успешная платежная операция                                                                                         |7        |Не найдена операция валидации                                                                                                  |7        |Ошибка при проведении платежа                                                                                                  |7        |Системная ошибка                                                                                                               |7        |System error                                                                                                                   |8        |Валюта в Корзине не совпадает с валютой заказа                                                                                 |8        |Сумма товарных позиций в Корзине не совпадает с общей суммой заказа                                                            |8        |Неверный формат корзины                                                                                                        |9        |Ошибка валидации данных |9        |Превышено кол-во попыток отправки уведомлений |9        |Некорректный номер телефона |9        |Заказ не найден |9        |Клиент не найден |9        |Клиент не верифицирован |9        |Недостаточно данных по клиенту |9        |Клиент неактивен |9        |Недостаточно данных по клиенту |9        |У найденного клиента есть отметка о смерти |9        |Неклассифицированный профиль клиента |9        |Найдено несколько клиентов |14       |Features указаны некорректно                                                                                                   |15       |Связка деактивирована клиентом                                                                                                  ## Тестовые карты |PAN карты              |Срок действия  |CVC/CVV  |Код ACS     |Комментарий                                                              | |-----------------------|---------------|---------|------------|-------------------------------------------------------------------------| |2202 2050 0001 2424    |05/28          |649      |-//-        |МИР 3DS 2.0 Frictionless, Authenticated                                  | |2202 2053 0006 8092    |05/26          |583      |111111      |МИР 3DS 2.0 Challenge, Authenticated. Фиксированный остаток - 100 рублей | |4006 8009 0096 2514    |05/26          |941      |111111      |VISA 3DS 1.0                                                             | |5469 9801 0004 8525    |05/26          |041      |111111      |MasterCard 3DS 1.0                                                       | |2202 2061 0004 0083    |05/26          |061      |-//-        |МИР, карта не вовлечена в 3DS                                            | |2202 2060 0027 0541    |05/28          |123      |111111      |МИР, корпоративная карта                                                 | |2202 2050 0006 0910    |06/28          |810      |111111      |МИР, карта для воспроизведения 116 ошибки (недостаточно средств)         |  |2202 2021 0759 3166    |06/22          |123      |111111      |МИР, карта для воспроизведения 101 ошибки (карта просрочена)             |   # Оплата с помощью SberPay При взаимодействии с Платежным шлюзом Клиенту доступен функционал оплаты с помощью SberPay в мобильном приложении \"Сбербанк-Онлайн\".  Имплементация функционала для достижения наилучших возможных показателей конверсии предусматривает соответствие платежного опыта Клиента с требованиями Банка,  описание функционала и примеры имплементации доступны в [ознакомительных материалах](promo/sponline.pdf).  ## Сценарий оплаты c помощью мобильного приложения \"Сбербанк-Онлайн\" __Обратите внимание!__ Работа с функционалом оплаты с помощью SberPay доступна в рамках сервисов, описанных в документации, но может быть  интегрирована Клиентом отдельно от других способов оплаты. При работе с функционалом SberPay использование блока \"sberbankOnlineAttributes\" в теле  запроса в jsonParams является __обязательным__ при регистрации заказа в сервисах register/registerPreAuth.  <a href='img/sequence_sberpay.png' target='_blank'><img src='img/sequence_sberpay.png'></a>  При интеграции сценария mweb2app на устройствах apple необходимо реализовывать процедуру перебора диплинков. Это связано с различными версиями приложений, установленных на устройствах пользователей. Подробная инструкция по реализации процедуры доступна в [документе](promo/deeplink_select_mWeb2app_3.pdf).  Описание требований к клиентскому опыту при реализации функционала SberPay в приложенном [документе](promo/Sberpay_expirience.pdf).  Описание интеграции функционала SberPay в приложенном [документе](promo/Sberpay_integration.pdf).  Руководство по логотипам для SberbankOnline в приложенном [документе](promo/Sberpay_logo.pdf).  Обработка операций и ответы Шлюза соответствуют описанию, размещенному в разделах [Описание кодов ответа Шлюза](doc#section/Obshaya-informaciya/Opisanie-kodov-otveta-Shlyuza)  и [Описание кодов ошибок Шлюза](doc#section/Obshaya-informaciya/Opisanie-kodov-oshibok-Shlyuza).  Пример оплаты с использованием SDK SberPay можно увидеть по [ссылке](https://rutube.ru/video/private/870dc0daa27c0808dfb5fc595f85387b/?p=G9FAeSseAPEUiyJ4B0fzLw)  ## Тестирование оплаты с помощью SberPay Дополнительно ознакомиться с процедурой тестирования SberPay можно в [документации](promo/sberpay_tfaq.pdf).  # Фискализация (54-ФЗ)  <span style=\"color:red;\">__Функционал доступен в режиме тестирования__</span>  В соответствии с Федеральным законом РФ №54-ФЗ c 01.07.2017 при осуществлении онлайн продаж, Продавец (в данной документации - Клиент), с помощью онлайн-кассы, обязан формировать кассовый чек и направлять его в ФНС и покупателю. В целях исполнения данного требования ПАО Сбербанк разработан механизм интеграции с онлайн-кассами, позволяющий упростить для Клиента данную процедуру. На текущий момент Платежным шлюзом поддерживаются только кассы \"АТОЛ Онлайн\" с версиями ФФД 1.05 и 1.2.  ## Доступный функционал  <span style=\"color:red;\">__Функционал доступен в режиме тестирования__</span>   - Отправка данных онлайн-кассе для формирования чеков в форматах ФФД 1.05 и 1.2; - Формирование чеков прихода, возврата прихода (в том числе - частичного);  - Возможность переотправки неуспешного чека с изменением корзины; - Переотправка чека в случае возникновения ошибки кассы или при таймауте отправки; - Создание чека отдельно от финансовой операции (закрывающий чек); - Возможность разделения чека на несколько, в случае превышения максимального размера; - Получение статуса чека с помощью callback уведомления и/или отдельным API запросом.  ## Условия формирования чеков Для успешной регистрации кассового чека необходимо выполнение следующих условий:   - В запросах register, registerPreAuth, deposit, reverse, refund должна содержаться корзина (блок orderBundle), с обязательным присутствием параметров ffdVersion и receiptType;   - Функционал фискализации заказов подключен и успешно настроен для мерчанта: учетные данные для подключения онлайн-кассы корректны и внесены в настройки.  ## Подключение кассы Для подключения кассы необходимо: 1. Зарегистрироваться в сервисе [\"АТОЛ Онлайн\"](https://sberbank.atol.ru/); 2. Самостоятельно, в соответствии с [инструкцией](https://atol.online/upload/iblock/83b/0s367ftz1ydlc8cf1v55vljqt3cr16t2/Atol_Pamyatka_APRIL_22.pdf) или с помощью сотрудников АТОЛ Онлайн зарегистрируйте кассу в Федеральной Налоговой Службе (ФНС) и у Оператора Фискальных Данных (ОФД); 3. В личном кабинете АТОЛ Онлайн получите учетные данные кассы (логин, пароль, код группы ККТ); 4. Для настройки интеграции направьте запрос в службу технической поддержки интернет-эквайринга Сбербанка. В запросе следует указать учетные данные кассы и используемую версию ФФД.  ## Сценарии работы с чеками <a href='img/ofd.png' target='_blank'><img src='img/ofd.png'></a>   # Личный кабинет  Ниже предоставлены несколько видео, демонстрирующих работу в личном кабинете интернет-эквайринга Сбера.  * [Создание ссылки на оплату](https://rutube.ru/video/private/522fb74a57e3f3a7541bee7aa47b2564/?p=ekzN2KTEB0nlmK1DVN7B6w) * [Отмена и завершение двухстадийных заказов](https://rutube.ru/video/private/43c31ecb7980276f62e21507c96c8639/?p=d3ZifcopU_A_DmGk4uVs5g) * [Сброс пароля от шлюза и самостоятельное изменение настроек](https://rutube.ru/video/private/10f2d9096183c5bf4008b710de33ea57/?p=qmXWqHqGn0K9OTwjv8Tj-g) * [Запрос на процессирование операции (на примере отмены возврата)](https://rutube.ru/video/private/441ae221d7dc3dee0986a77a39526a58/?p=TnEhBUNQAnjok0D-VvMbXQ) * [Формирование отчетности](https://rutube.ru/video/private/7600e50bc23d3130d4668768263aa68c/?p=7OH_ooemExrdrwYToQufMw) * [Оформление частичного возврата по заказу](https://rutube.ru/video/private/75228c725912366ce6f08566527f0d6c/?p=zVEMMn2iYH8fY10Oh12OCQ) * [Поиск по номеру заказа только для просмотра (пользователь с ограниченными правами)](https://rutube.ru/video/private/1c73df0c504afc96f73e86fcea46239f/?p=54rC72CO6iqpsoil_9It1g)
 *
 * The version of the OpenAPI document: 1.0.5
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SberPay\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SberPay\ObjectSerializer;

/**
 * CartItemsItemsInner Class Doc Comment
 *
 * @description Элемент массива с атрибутами товарной позиции в Корзине
 * @package  SberPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CartItemsItemsInner implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'cartItems_items_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'position_id' => 'string',
        'item_code' => 'string',
        'discount' => '\SberPay\Model\CartItemsItemsInnerDiscount',
        'agent_interest' => '\SberPay\Model\CartItemsItemsInnerAgentInterest',
        'name' => 'string',
        'quantity' => '\SberPay\Model\CartItemsItemsInnerQuantity',
        'measurement_unit' => 'string',
        'item_price' => 'int',
        'item_amount' => 'int',
        'item_currency' => 'float',
        'payment_method' => 'string',
        'payment_object' => 'string',
        'tax' => '\SberPay\Model\CartItemsItemsInnerTax',
        'nomenclature_code' => 'string',
        'mark_code' => '\SberPay\Model\CartItemsItemsInnerMarkCode',
        'mark_quantity' => '\SberPay\Model\CartItemsItemsInnerMarkQuantity',
        'mark_processing_mode' => 'string',
        'excise' => 'string',
        'country_code' => 'string',
        'declaration_number' => 'string',
        'agent_info' => '\SberPay\Model\CartItemsItemsInnerAgentInfo',
        'supplier_info' => '\SberPay\Model\CartItemsItemsInnerSupplierInfo',
        'sectoral_item_props' => '\SberPay\Model\CartItemsItemsInnerSectoralItemPropsInner[]',
        'user_data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'position_id' => null,
        'item_code' => null,
        'discount' => null,
        'agent_interest' => null,
        'name' => null,
        'quantity' => null,
        'measurement_unit' => null,
        'item_price' => null,
        'item_amount' => null,
        'item_currency' => null,
        'payment_method' => null,
        'payment_object' => null,
        'tax' => null,
        'nomenclature_code' => null,
        'mark_code' => null,
        'mark_quantity' => null,
        'mark_processing_mode' => null,
        'excise' => null,
        'country_code' => null,
        'declaration_number' => null,
        'agent_info' => null,
        'supplier_info' => null,
        'sectoral_item_props' => null,
        'user_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'position_id' => false,
        'item_code' => false,
        'discount' => false,
        'agent_interest' => false,
        'name' => false,
        'quantity' => false,
        'measurement_unit' => false,
        'item_price' => false,
        'item_amount' => false,
        'item_currency' => false,
        'payment_method' => false,
        'payment_object' => false,
        'tax' => false,
        'nomenclature_code' => false,
        'mark_code' => false,
        'mark_quantity' => false,
        'mark_processing_mode' => false,
        'excise' => false,
        'country_code' => false,
        'declaration_number' => false,
        'agent_info' => false,
        'supplier_info' => false,
        'sectoral_item_props' => false,
        'user_data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'position_id' => 'positionId',
        'item_code' => 'itemCode',
        'discount' => 'discount',
        'agent_interest' => 'agentInterest',
        'name' => 'name',
        'quantity' => 'quantity',
        'measurement_unit' => 'measurementUnit',
        'item_price' => 'itemPrice',
        'item_amount' => 'itemAmount',
        'item_currency' => 'itemCurrency',
        'payment_method' => 'paymentMethod',
        'payment_object' => 'paymentObject',
        'tax' => 'tax',
        'nomenclature_code' => 'nomenclatureCode',
        'mark_code' => 'markCode',
        'mark_quantity' => 'markQuantity',
        'mark_processing_mode' => 'markProcessingMode',
        'excise' => 'excise',
        'country_code' => 'countryCode',
        'declaration_number' => 'declarationNumber',
        'agent_info' => 'agentInfo',
        'supplier_info' => 'supplierInfo',
        'sectoral_item_props' => 'sectoralItemProps',
        'user_data' => 'userData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'position_id' => 'setPositionId',
        'item_code' => 'setItemCode',
        'discount' => 'setDiscount',
        'agent_interest' => 'setAgentInterest',
        'name' => 'setName',
        'quantity' => 'setQuantity',
        'measurement_unit' => 'setMeasurementUnit',
        'item_price' => 'setItemPrice',
        'item_amount' => 'setItemAmount',
        'item_currency' => 'setItemCurrency',
        'payment_method' => 'setPaymentMethod',
        'payment_object' => 'setPaymentObject',
        'tax' => 'setTax',
        'nomenclature_code' => 'setNomenclatureCode',
        'mark_code' => 'setMarkCode',
        'mark_quantity' => 'setMarkQuantity',
        'mark_processing_mode' => 'setMarkProcessingMode',
        'excise' => 'setExcise',
        'country_code' => 'setCountryCode',
        'declaration_number' => 'setDeclarationNumber',
        'agent_info' => 'setAgentInfo',
        'supplier_info' => 'setSupplierInfo',
        'sectoral_item_props' => 'setSectoralItemProps',
        'user_data' => 'setUserData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'position_id' => 'getPositionId',
        'item_code' => 'getItemCode',
        'discount' => 'getDiscount',
        'agent_interest' => 'getAgentInterest',
        'name' => 'getName',
        'quantity' => 'getQuantity',
        'measurement_unit' => 'getMeasurementUnit',
        'item_price' => 'getItemPrice',
        'item_amount' => 'getItemAmount',
        'item_currency' => 'getItemCurrency',
        'payment_method' => 'getPaymentMethod',
        'payment_object' => 'getPaymentObject',
        'tax' => 'getTax',
        'nomenclature_code' => 'getNomenclatureCode',
        'mark_code' => 'getMarkCode',
        'mark_quantity' => 'getMarkQuantity',
        'mark_processing_mode' => 'getMarkProcessingMode',
        'excise' => 'getExcise',
        'country_code' => 'getCountryCode',
        'declaration_number' => 'getDeclarationNumber',
        'agent_info' => 'getAgentInfo',
        'supplier_info' => 'getSupplierInfo',
        'sectoral_item_props' => 'getSectoralItemProps',
        'user_data' => 'getUserData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const PAYMENT_METHOD_FULL_PREPAYMENT = 'full_prepayment';
    public const PAYMENT_METHOD_PREPAYMENT = 'prepayment';
    public const PAYMENT_METHOD_ADVANCE = 'advance';
    public const PAYMENT_METHOD_FULL_PAYMENT = 'full_payment';
    public const PAYMENT_METHOD_PARTIAL_PAYMENT = 'partial_payment';
    public const PAYMENT_METHOD_CREDIT = 'credit';
    public const PAYMENT_METHOD_CREDIT_PAYMENT = 'credit_payment';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_FULL_PREPAYMENT,
            self::PAYMENT_METHOD_PREPAYMENT,
            self::PAYMENT_METHOD_ADVANCE,
            self::PAYMENT_METHOD_FULL_PAYMENT,
            self::PAYMENT_METHOD_PARTIAL_PAYMENT,
            self::PAYMENT_METHOD_CREDIT,
            self::PAYMENT_METHOD_CREDIT_PAYMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('position_id', $data ?? [], null);
        $this->setIfExists('item_code', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('agent_interest', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('measurement_unit', $data ?? [], null);
        $this->setIfExists('item_price', $data ?? [], null);
        $this->setIfExists('item_amount', $data ?? [], null);
        $this->setIfExists('item_currency', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('payment_object', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('nomenclature_code', $data ?? [], null);
        $this->setIfExists('mark_code', $data ?? [], null);
        $this->setIfExists('mark_quantity', $data ?? [], null);
        $this->setIfExists('mark_processing_mode', $data ?? [], null);
        $this->setIfExists('excise', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('declaration_number', $data ?? [], null);
        $this->setIfExists('agent_info', $data ?? [], null);
        $this->setIfExists('supplier_info', $data ?? [], null);
        $this->setIfExists('sectoral_item_props', $data ?? [], null);
        $this->setIfExists('user_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['position_id'] === null) {
            $invalidProperties[] = "'position_id' can't be null";
        }
        if ((mb_strlen($this->container['position_id']) > 12)) {
            $invalidProperties[] = "invalid value for 'position_id', the character length must be smaller than or equal to 12.";
        }

        if ((mb_strlen($this->container['position_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'position_id', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[0-9]*$/", $this->container['position_id'])) {
            $invalidProperties[] = "invalid value for 'position_id', must be conform to the pattern /^[0-9]*$/.";
        }

        if ($this->container['item_code'] === null) {
            $invalidProperties[] = "'item_code' can't be null";
        }
        if ((mb_strlen($this->container['item_code']) > 100)) {
            $invalidProperties[] = "invalid value for 'item_code', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['item_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'item_code', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['item_code'])) {
            $invalidProperties[] = "invalid value for 'item_code', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['name'])) {
            $invalidProperties[] = "invalid value for 'name', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if (!is_null($this->container['measurement_unit']) && (mb_strlen($this->container['measurement_unit']) > 16)) {
            $invalidProperties[] = "invalid value for 'measurement_unit', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['measurement_unit']) && (mb_strlen($this->container['measurement_unit']) < 1)) {
            $invalidProperties[] = "invalid value for 'measurement_unit', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['item_price'] === null) {
            $invalidProperties[] = "'item_price' can't be null";
        }
        if (($this->container['item_price'] > 4294967200)) {
            $invalidProperties[] = "invalid value for 'item_price', must be smaller than or equal to 4294967200.";
        }

        if (($this->container['item_price'] < 0)) {
            $invalidProperties[] = "invalid value for 'item_price', must be bigger than or equal to 0.";
        }

        if ($this->container['item_amount'] === null) {
            $invalidProperties[] = "'item_amount' can't be null";
        }
        if (($this->container['item_amount'] > 4294967200)) {
            $invalidProperties[] = "invalid value for 'item_amount', must be smaller than or equal to 4294967200.";
        }

        if (($this->container['item_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'item_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['payment_method'] === null) {
            $invalidProperties[] = "'payment_method' can't be null";
        }
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($this->container['payment_method']) && !in_array($this->container['payment_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_method', must be one of '%s'",
                $this->container['payment_method'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['payment_object'] === null) {
            $invalidProperties[] = "'payment_object' can't be null";
        }
        if ((mb_strlen($this->container['payment_object']) > 21)) {
            $invalidProperties[] = "invalid value for 'payment_object', the character length must be smaller than or equal to 21.";
        }

        if ((mb_strlen($this->container['payment_object']) < 1)) {
            $invalidProperties[] = "invalid value for 'payment_object', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[A-Za-z0-9-_ ]+$/", $this->container['payment_object'])) {
            $invalidProperties[] = "invalid value for 'payment_object', must be conform to the pattern /^[A-Za-z0-9-_ ]+$/.";
        }

        if ($this->container['tax'] === null) {
            $invalidProperties[] = "'tax' can't be null";
        }
        if (!is_null($this->container['nomenclature_code']) && (mb_strlen($this->container['nomenclature_code']) > 150)) {
            $invalidProperties[] = "invalid value for 'nomenclature_code', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['nomenclature_code']) && (mb_strlen($this->container['nomenclature_code']) < 18)) {
            $invalidProperties[] = "invalid value for 'nomenclature_code', the character length must be bigger than or equal to 18.";
        }

        if (!is_null($this->container['nomenclature_code']) && !preg_match("/^[A-F0-9\\-]+$/", $this->container['nomenclature_code'])) {
            $invalidProperties[] = "invalid value for 'nomenclature_code', must be conform to the pattern /^[A-F0-9\\-]+$/.";
        }

        if (!is_null($this->container['mark_processing_mode']) && !preg_match("/^\\d+$/", $this->container['mark_processing_mode'])) {
            $invalidProperties[] = "invalid value for 'mark_processing_mode', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['excise']) && (mb_strlen($this->container['excise']) > 10)) {
            $invalidProperties[] = "invalid value for 'excise', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['excise']) && (mb_strlen($this->container['excise']) < 1)) {
            $invalidProperties[] = "invalid value for 'excise', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['excise']) && !preg_match("/^\\d+$/", $this->container['excise'])) {
            $invalidProperties[] = "invalid value for 'excise', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) < 3)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['country_code']) && !preg_match("/^\\d+$/", $this->container['country_code'])) {
            $invalidProperties[] = "invalid value for 'country_code', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['declaration_number']) && (mb_strlen($this->container['declaration_number']) > 32)) {
            $invalidProperties[] = "invalid value for 'declaration_number', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['declaration_number']) && (mb_strlen($this->container['declaration_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'declaration_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['declaration_number']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['declaration_number'])) {
            $invalidProperties[] = "invalid value for 'declaration_number', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        if (!is_null($this->container['user_data']) && (mb_strlen($this->container['user_data']) > 64)) {
            $invalidProperties[] = "invalid value for 'user_data', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['user_data']) && (mb_strlen($this->container['user_data']) < 1)) {
            $invalidProperties[] = "invalid value for 'user_data', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['user_data']) && !preg_match("/^[ -~А-Яа-яЁё№]*$/", $this->container['user_data'])) {
            $invalidProperties[] = "invalid value for 'user_data', must be conform to the pattern /^[ -~А-Яа-яЁё№]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets position_id
     *
     * @return string
     */
    public function getPositionId(): string
    {
        return $this->container['position_id'];
    }

    /**
     * Sets position_id
     *
     * @param string $position_id Уникальный идентификатор товарной позиции внутри Корзины
     *
     * @return $this
     */
    public function setPositionId(string $position_id): static
    {
        if (is_null($position_id)) {
            throw new InvalidArgumentException('non-nullable position_id cannot be null');
        }
        if ((mb_strlen($position_id) > 12)) {
            throw new InvalidArgumentException('invalid length for $position_id when calling CartItemsItemsInner., must be smaller than or equal to 12.');
        }
        if ((mb_strlen($position_id) < 1)) {
            throw new InvalidArgumentException('invalid length for $position_id when calling CartItemsItemsInner., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[0-9]*$/", ObjectSerializer::toString($position_id)))) {
            throw new InvalidArgumentException("invalid value for \$position_id when calling CartItemsItemsInner., must conform to the pattern /^[0-9]*$/.");
        }

        $this->container['position_id'] = $position_id;

        return $this;
    }

    /**
     * Gets item_code
     *
     * @return string
     */
    public function getItemCode(): string
    {
        return $this->container['item_code'];
    }

    /**
     * Sets item_code
     *
     * @param string $item_code Номер (идентификатор) товарной позиции в системе Клиента. Параметр должен быть уникальным в рамках запроса
     *
     * @return $this
     */
    public function setItemCode(string $item_code): static
    {
        if (is_null($item_code)) {
            throw new InvalidArgumentException('non-nullable item_code cannot be null');
        }
        if ((mb_strlen($item_code) > 100)) {
            throw new InvalidArgumentException('invalid length for $item_code when calling CartItemsItemsInner., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($item_code) < 1)) {
            throw new InvalidArgumentException('invalid length for $item_code when calling CartItemsItemsInner., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($item_code)))) {
            throw new InvalidArgumentException("invalid value for \$item_code when calling CartItemsItemsInner., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['item_code'] = $item_code;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return \SberPay\Model\CartItemsItemsInnerDiscount|null
     */
    public function getDiscount(): ?\SberPay\Model\CartItemsItemsInnerDiscount
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param \SberPay\Model\CartItemsItemsInnerDiscount|null $discount discount
     *
     * @return $this
     */
    public function setDiscount(?\SberPay\Model\CartItemsItemsInnerDiscount $discount): static
    {
        if (is_null($discount)) {
            throw new InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets agent_interest
     *
     * @return \SberPay\Model\CartItemsItemsInnerAgentInterest|null
     */
    public function getAgentInterest(): ?\SberPay\Model\CartItemsItemsInnerAgentInterest
    {
        return $this->container['agent_interest'];
    }

    /**
     * Sets agent_interest
     *
     * @param \SberPay\Model\CartItemsItemsInnerAgentInterest|null $agent_interest agent_interest
     *
     * @return $this
     */
    public function setAgentInterest(?\SberPay\Model\CartItemsItemsInnerAgentInterest $agent_interest): static
    {
        if (is_null($agent_interest)) {
            throw new InvalidArgumentException('non-nullable agent_interest cannot be null');
        }
        $this->container['agent_interest'] = $agent_interest;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name __Тег ФФД 1030.__ Наименование или описание товарной позиции Корзины в свободной форме
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 100)) {
            throw new InvalidArgumentException('invalid length for $name when calling CartItemsItemsInner., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new InvalidArgumentException('invalid length for $name when calling CartItemsItemsInner., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($name)))) {
            throw new InvalidArgumentException("invalid value for \$name when calling CartItemsItemsInner., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return \SberPay\Model\CartItemsItemsInnerQuantity
     */
    public function getQuantity(): \SberPay\Model\CartItemsItemsInnerQuantity
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param \SberPay\Model\CartItemsItemsInnerQuantity $quantity quantity
     *
     * @return $this
     */
    public function setQuantity(\SberPay\Model\CartItemsItemsInnerQuantity $quantity): static
    {
        if (is_null($quantity)) {
            throw new InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets measurement_unit
     *
     * @return string|null
     */
    public function getMeasurementUnit(): ?string
    {
        return $this->container['measurement_unit'];
    }

    /**
     * Sets measurement_unit
     *
     * @param string|null $measurement_unit __Тег ФФД 1197.__ Единица измерения предмета расчета. Передается только при использовании ФФД версии 1.05.
     *
     * @return $this
     */
    public function setMeasurementUnit(?string $measurement_unit): static
    {
        if (is_null($measurement_unit)) {
            throw new InvalidArgumentException('non-nullable measurement_unit cannot be null');
        }
        if ((mb_strlen($measurement_unit) > 16)) {
            throw new InvalidArgumentException('invalid length for $measurement_unit when calling CartItemsItemsInner., must be smaller than or equal to 16.');
        }
        if ((mb_strlen($measurement_unit) < 1)) {
            throw new InvalidArgumentException('invalid length for $measurement_unit when calling CartItemsItemsInner., must be bigger than or equal to 1.');
        }

        $this->container['measurement_unit'] = $measurement_unit;

        return $this;
    }

    /**
     * Gets item_price
     *
     * @return int
     */
    public function getItemPrice(): int
    {
        return $this->container['item_price'];
    }

    /**
     * Sets item_price
     *
     * @param int $item_price __Тег ФФД 1079.__ Стоимость единицы товара/услуги в минимальных единицах валюты, с учетом скидок, баллов, бонусов и т.п. Обязателен для фискализации.
     *
     * @return $this
     */
    public function setItemPrice(int $item_price): static
    {
        if (is_null($item_price)) {
            throw new InvalidArgumentException('non-nullable item_price cannot be null');
        }

        if (($item_price > 4294967200)) {
            throw new InvalidArgumentException('invalid value for $item_price when calling CartItemsItemsInner., must be smaller than or equal to 4294967200.');
        }
        if (($item_price < 0)) {
            throw new InvalidArgumentException('invalid value for $item_price when calling CartItemsItemsInner., must be bigger than or equal to 0.');
        }

        $this->container['item_price'] = $item_price;

        return $this;
    }

    /**
     * Gets item_amount
     *
     * @return int
     */
    public function getItemAmount(): int
    {
        return $this->container['item_amount'];
    }

    /**
     * Sets item_amount
     *
     * @param int $item_amount __Тег ФФД 1043.__ Итоговая стоимость позиции с учетом скидок, баллов, бонусов в минимальных единицах валюты. Должна соответствовать произведению количества товара в позиции и стоимости единицы товара. Обязательно для фискализации. Сумма всех товарных позиций Корзины должна быть равна сумме Заказа
     *
     * @return $this
     */
    public function setItemAmount(int $item_amount): static
    {
        if (is_null($item_amount)) {
            throw new InvalidArgumentException('non-nullable item_amount cannot be null');
        }

        if (($item_amount > 4294967200)) {
            throw new InvalidArgumentException('invalid value for $item_amount when calling CartItemsItemsInner., must be smaller than or equal to 4294967200.');
        }
        if (($item_amount < 0)) {
            throw new InvalidArgumentException('invalid value for $item_amount when calling CartItemsItemsInner., must be bigger than or equal to 0.');
        }

        $this->container['item_amount'] = $item_amount;

        return $this;
    }

    /**
     * Gets item_currency
     *
     * @return float|null
     */
    public function getItemCurrency(): ?float
    {
        return $this->container['item_currency'];
    }

    /**
     * Sets item_currency
     *
     * @param float|null $item_currency Код валюты товарной позиции ISO 4217. Если не указан, считается равным валюте заказа. Все товарные позиции Корзины должны быть выражены в одной и той же валюте и должны совпадать с валютой оригинального Заказа
     *
     * @return $this
     */
    public function setItemCurrency(?float $item_currency): static
    {
        if (is_null($item_currency)) {
            throw new InvalidArgumentException('non-nullable item_currency cannot be null');
        }


        $this->container['item_currency'] = $item_currency;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod(): string
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method __Тег ФФД 1214.__ Признак способа расчета. Может принимать следующие значения:   * `full_prepayment` - Полная предоплата   * `prepayment` - Частичная предоплата   * `advance` - Аванс   * `full_payment` - Полный расчет. В том числе и с учетом аванса или предоплаты   * `partial_payment` - Частичный расчет и кредит   * `credit` - Кредит   * `credit_payment` - Оплата кредита
     *
     * @return $this
     */
    public function setPaymentMethod(string $payment_method): static
    {
        if (is_null($payment_method)) {
            throw new InvalidArgumentException('non-nullable payment_method cannot be null');
        }
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!in_array($payment_method, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_method', must be one of '%s'",
                    $payment_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets payment_object
     *
     * @return string
     */
    public function getPaymentObject(): string
    {
        return $this->container['payment_object'];
    }

    /**
     * Sets payment_object
     *
     * @param string $payment_object __Тег ФФД 1212.__ Признак предмета расчета. Значения в справочнике.  Предмет расчета                                                                                                                                        | ФФД 1.05               | ФФД 1.2 -------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------|--------- Товар                                                                                                                                                  | commodity              | 1 Подакцизный товар без маркировки. Например, легковой автомобиль, моторное масло, сахаросодержащие напитки.                                             | excise                 | 2 Услуга                                                                                                                                                 | service                | 4 Работа                                                                                                                                                 | job                    | 3 Платеж. Передается, если формируется чек Аванса или Предоплаты                                                                                         | payment                | 10 Товар, подлежащий маркировке и имеющий код маркировки. Например, молочная продукция, товары легкой промышленности.                                     | отсутствует            | 33 Товар, подлежащий маркировке и не имеющий кода маркировки. Например, если код маркировки испорчен и не подлежит считыванию и восстановлению.           | отсутствует            | 32 Подакцизный маркированный товар, имеющий код маркировки                                                                                                | отсутствует            | 31 Ставка азартной игры                                                                                                                                   | gambling_bet           | 5 Лотерейный билет                                                                                                                                       | lottery                | 7 Результат интеллектуальной деятельности                                                                                                                | intellectual_activity  | 9 Курортный сбор                                                                                                                                         | отсутствует            | 18 Внереализационный доход. Может использоваться, например, в случае предъявления штрафа покупателю или невозможности вернуть остаток с подарочной карты. | non-operating_gain     | 15 Взнос в счет оплаты пени, штрафе, вознаграждении                                                                                                       | award                  | 12 Агентское вознаграждение                                                                                                                               | agent_commission       | 11 Имущественное право                                                                                                                                    | property_right         | 14 Страховые взносы                                                                                                                                       | insurance_premium      | 16 Торговый сбор                                                                                                                                          | sales_tax              | 17 Залог                                                                                                                                                  | deposit                | 19 О суммах произведенных расходов в соответствии со статьей 346.16                                                                                       | expense                | 20 Взносы на ОПС ИП                                                                                                                                       | pension_insurance_ip   | 21 Взносы на ОПС                                                                                                                                          | pension_insurance      | 22 Взносы на ОМС ИП                                                                                                                                       | medical_insurance_ip   | 23 Взносы на ОМС                                                                                                                                          | medical_insurance      | 24 Взносы на ОСС                                                                                                                                          | social_insurance       | 25 Платеж казино                                                                                                                                          | casino_payment         | 26 Выдача денежных средств банковским платежным агентом                                                                                                   | отсутствует            | 27 Иной предмет расчета                                                                                                                                   | another                | 13
     *
     * @return $this
     */
    public function setPaymentObject(string $payment_object): static
    {
        if (is_null($payment_object)) {
            throw new InvalidArgumentException('non-nullable payment_object cannot be null');
        }
        if ((mb_strlen($payment_object) > 21)) {
            throw new InvalidArgumentException('invalid length for $payment_object when calling CartItemsItemsInner., must be smaller than or equal to 21.');
        }
        if ((mb_strlen($payment_object) < 1)) {
            throw new InvalidArgumentException('invalid length for $payment_object when calling CartItemsItemsInner., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[A-Za-z0-9-_ ]+$/", ObjectSerializer::toString($payment_object)))) {
            throw new InvalidArgumentException("invalid value for \$payment_object when calling CartItemsItemsInner., must conform to the pattern /^[A-Za-z0-9-_ ]+$/.");
        }

        $this->container['payment_object'] = $payment_object;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return \SberPay\Model\CartItemsItemsInnerTax
     */
    public function getTax(): \SberPay\Model\CartItemsItemsInnerTax
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param \SberPay\Model\CartItemsItemsInnerTax $tax tax
     *
     * @return $this
     */
    public function setTax(\SberPay\Model\CartItemsItemsInnerTax $tax): static
    {
        if (is_null($tax)) {
            throw new InvalidArgumentException('non-nullable tax cannot be null');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets nomenclature_code
     *
     * @return string|null
     */
    public function getNomenclatureCode(): ?string
    {
        return $this->container['nomenclature_code'];
    }

    /**
     * Sets nomenclature_code
     *
     * @param string|null $nomenclature_code __Тег ФФД 1162.__ Используется только при продаже маркированных товаров. Код товара в шестнадцатиричном представлении, с пробелами. Передается при реализации маркированных товаров в ФФД 1.05. Максимальная длина 32 байта. Для касс АТОЛ Онлайн допускается прямая передача кода товара, считанного в формате GS1 Data Matrix. В таком случае сервис сам преобразует значение в необходимый шестнадцатиричный вид.
     *
     * @return $this
     */
    public function setNomenclatureCode(?string $nomenclature_code): static
    {
        if (is_null($nomenclature_code)) {
            throw new InvalidArgumentException('non-nullable nomenclature_code cannot be null');
        }
        if ((mb_strlen($nomenclature_code) > 150)) {
            throw new InvalidArgumentException('invalid length for $nomenclature_code when calling CartItemsItemsInner., must be smaller than or equal to 150.');
        }
        if ((mb_strlen($nomenclature_code) < 18)) {
            throw new InvalidArgumentException('invalid length for $nomenclature_code when calling CartItemsItemsInner., must be bigger than or equal to 18.');
        }
        if ((!preg_match("/^[A-F0-9\\-]+$/", ObjectSerializer::toString($nomenclature_code)))) {
            throw new InvalidArgumentException("invalid value for \$nomenclature_code when calling CartItemsItemsInner., must conform to the pattern /^[A-F0-9\\-]+$/.");
        }

        $this->container['nomenclature_code'] = $nomenclature_code;

        return $this;
    }

    /**
     * Gets mark_code
     *
     * @return \SberPay\Model\CartItemsItemsInnerMarkCode|null
     */
    public function getMarkCode(): ?\SberPay\Model\CartItemsItemsInnerMarkCode
    {
        return $this->container['mark_code'];
    }

    /**
     * Sets mark_code
     *
     * @param \SberPay\Model\CartItemsItemsInnerMarkCode|null $mark_code mark_code
     *
     * @return $this
     */
    public function setMarkCode(?\SberPay\Model\CartItemsItemsInnerMarkCode $mark_code): static
    {
        if (is_null($mark_code)) {
            throw new InvalidArgumentException('non-nullable mark_code cannot be null');
        }
        $this->container['mark_code'] = $mark_code;

        return $this;
    }

    /**
     * Gets mark_quantity
     *
     * @return \SberPay\Model\CartItemsItemsInnerMarkQuantity|null
     */
    public function getMarkQuantity(): ?\SberPay\Model\CartItemsItemsInnerMarkQuantity
    {
        return $this->container['mark_quantity'];
    }

    /**
     * Sets mark_quantity
     *
     * @param \SberPay\Model\CartItemsItemsInnerMarkQuantity|null $mark_quantity mark_quantity
     *
     * @return $this
     */
    public function setMarkQuantity(?\SberPay\Model\CartItemsItemsInnerMarkQuantity $mark_quantity): static
    {
        if (is_null($mark_quantity)) {
            throw new InvalidArgumentException('non-nullable mark_quantity cannot be null');
        }
        $this->container['mark_quantity'] = $mark_quantity;

        return $this;
    }

    /**
     * Gets mark_processing_mode
     *
     * @return string|null
     */
    public function getMarkProcessingMode(): ?string
    {
        return $this->container['mark_processing_mode'];
    }

    /**
     * Sets mark_processing_mode
     *
     * @param string|null $mark_processing_mode __Тег ФФД 2102.__ Режим обработки кода маркировки. Передается значение \"0\" при торговле маркированными товарами. Только для ФФД 1.2.
     *
     * @return $this
     */
    public function setMarkProcessingMode(?string $mark_processing_mode): static
    {
        if (is_null($mark_processing_mode)) {
            throw new InvalidArgumentException('non-nullable mark_processing_mode cannot be null');
        }

        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($mark_processing_mode)))) {
            throw new InvalidArgumentException("invalid value for \$mark_processing_mode when calling CartItemsItemsInner., must conform to the pattern /^\\d+$/.");
        }

        $this->container['mark_processing_mode'] = $mark_processing_mode;

        return $this;
    }

    /**
     * Gets excise
     *
     * @return string|null
     */
    public function getExcise(): ?string
    {
        return $this->container['excise'];
    }

    /**
     * Sets excise
     *
     * @param string|null $excise __Тег ФФД 1229.__ Используется при продаже подакцизных товаров. Сумма акциза в минимальных единицах валюты
     *
     * @return $this
     */
    public function setExcise(?string $excise): static
    {
        if (is_null($excise)) {
            throw new InvalidArgumentException('non-nullable excise cannot be null');
        }
        if ((mb_strlen($excise) > 10)) {
            throw new InvalidArgumentException('invalid length for $excise when calling CartItemsItemsInner., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($excise) < 1)) {
            throw new InvalidArgumentException('invalid length for $excise when calling CartItemsItemsInner., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($excise)))) {
            throw new InvalidArgumentException("invalid value for \$excise when calling CartItemsItemsInner., must conform to the pattern /^\\d+$/.");
        }

        $this->container['excise'] = $excise;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode(): ?string
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code __Тег ФФД 1230.__ Используется при продаже подакцизных товаров. Код страны происхождения товара, 3 цифры.
     *
     * @return $this
     */
    public function setCountryCode(?string $country_code): static
    {
        if (is_null($country_code)) {
            throw new InvalidArgumentException('non-nullable country_code cannot be null');
        }
        if ((mb_strlen($country_code) > 3)) {
            throw new InvalidArgumentException('invalid length for $country_code when calling CartItemsItemsInner., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($country_code) < 3)) {
            throw new InvalidArgumentException('invalid length for $country_code when calling CartItemsItemsInner., must be bigger than or equal to 3.');
        }
        if ((!preg_match("/^\\d+$/", ObjectSerializer::toString($country_code)))) {
            throw new InvalidArgumentException("invalid value for \$country_code when calling CartItemsItemsInner., must conform to the pattern /^\\d+$/.");
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets declaration_number
     *
     * @return string|null
     */
    public function getDeclarationNumber(): ?string
    {
        return $this->container['declaration_number'];
    }

    /**
     * Sets declaration_number
     *
     * @param string|null $declaration_number __Тег ФФД 1231.__ Используется при продаже подакцизных товаров. Номер таможенной декларации
     *
     * @return $this
     */
    public function setDeclarationNumber(?string $declaration_number): static
    {
        if (is_null($declaration_number)) {
            throw new InvalidArgumentException('non-nullable declaration_number cannot be null');
        }
        if ((mb_strlen($declaration_number) > 32)) {
            throw new InvalidArgumentException('invalid length for $declaration_number when calling CartItemsItemsInner., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($declaration_number) < 1)) {
            throw new InvalidArgumentException('invalid length for $declaration_number when calling CartItemsItemsInner., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($declaration_number)))) {
            throw new InvalidArgumentException("invalid value for \$declaration_number when calling CartItemsItemsInner., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['declaration_number'] = $declaration_number;

        return $this;
    }

    /**
     * Gets agent_info
     *
     * @return \SberPay\Model\CartItemsItemsInnerAgentInfo|null
     */
    public function getAgentInfo(): ?\SberPay\Model\CartItemsItemsInnerAgentInfo
    {
        return $this->container['agent_info'];
    }

    /**
     * Sets agent_info
     *
     * @param \SberPay\Model\CartItemsItemsInnerAgentInfo|null $agent_info agent_info
     *
     * @return $this
     */
    public function setAgentInfo(?\SberPay\Model\CartItemsItemsInnerAgentInfo $agent_info): static
    {
        if (is_null($agent_info)) {
            throw new InvalidArgumentException('non-nullable agent_info cannot be null');
        }
        $this->container['agent_info'] = $agent_info;

        return $this;
    }

    /**
     * Gets supplier_info
     *
     * @return \SberPay\Model\CartItemsItemsInnerSupplierInfo|null
     */
    public function getSupplierInfo(): ?\SberPay\Model\CartItemsItemsInnerSupplierInfo
    {
        return $this->container['supplier_info'];
    }

    /**
     * Sets supplier_info
     *
     * @param \SberPay\Model\CartItemsItemsInnerSupplierInfo|null $supplier_info supplier_info
     *
     * @return $this
     */
    public function setSupplierInfo(?\SberPay\Model\CartItemsItemsInnerSupplierInfo $supplier_info): static
    {
        if (is_null($supplier_info)) {
            throw new InvalidArgumentException('non-nullable supplier_info cannot be null');
        }
        $this->container['supplier_info'] = $supplier_info;

        return $this;
    }

    /**
     * Gets sectoral_item_props
     *
     * @return \SberPay\Model\CartItemsItemsInnerSectoralItemPropsInner[]|null
     */
    public function getSectoralItemProps(): ?array
    {
        return $this->container['sectoral_item_props'];
    }

    /**
     * Sets sectoral_item_props
     *
     * @param \SberPay\Model\CartItemsItemsInnerSectoralItemPropsInner[]|null $sectoral_item_props __Тег ФФД 1260.__ Отраслевой реквизит предмета расчета. Передается, если в предмете расчета содержится маркированный товар и включение указанного реквизита предусмотрено нормативными актами для этой товарной группы. Только для ФФД 1.2.
     *
     * @return $this
     */
    public function setSectoralItemProps(?array $sectoral_item_props): static
    {
        if (is_null($sectoral_item_props)) {
            throw new InvalidArgumentException('non-nullable sectoral_item_props cannot be null');
        }
        $this->container['sectoral_item_props'] = $sectoral_item_props;

        return $this;
    }

    /**
     * Gets user_data
     *
     * @return string|null
     */
    public function getUserData(): ?string
    {
        return $this->container['user_data'];
    }

    /**
     * Sets user_data
     *
     * @param string|null $user_data __Тег ФФД 1191.__ Дополнительный реквизит предмета расчета. Может включатся в чек с учетом особенностей сферы деятельности.
     *
     * @return $this
     */
    public function setUserData(?string $user_data): static
    {
        if (is_null($user_data)) {
            throw new InvalidArgumentException('non-nullable user_data cannot be null');
        }
        if ((mb_strlen($user_data) > 64)) {
            throw new InvalidArgumentException('invalid length for $user_data when calling CartItemsItemsInner., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($user_data) < 1)) {
            throw new InvalidArgumentException('invalid length for $user_data when calling CartItemsItemsInner., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[ -~А-Яа-яЁё№]*$/", ObjectSerializer::toString($user_data)))) {
            throw new InvalidArgumentException("invalid value for \$user_data when calling CartItemsItemsInner., must conform to the pattern /^[ -~А-Яа-яЁё№]*$/.");
        }

        $this->container['user_data'] = $user_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


